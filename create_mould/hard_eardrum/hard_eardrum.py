from ..bottom_ring import get_plane_height
from ..normal_projection import hard_normal_projection_to_darw_cut_plane, get_highest_vert
from ...tool import getOverride, convert_to_mesh
from ...tool import moveToRight
from ...tool import moveToLeft
from ...utils.utils import *
from ..local_retop import retopo
import bpy
import bmesh

is_timer_modifier_start = False      #防止 定时器(完成重拓扑操作后为重拓扑后的物体添加修改器控制其平滑度)添加过多
# border_vert_co_and_normal = [
#     ((-3.6916444301605225, 8.6956148147583, -3.810093641281128),
#      (-0.7966533303260803, -0.10662736743688583, -0.5949571132659912)),
#     ((-3.3809030055999756, 8.374272346496582, -4.0954766273498535),
#      (-0.6736541390419006, -0.185792937874794, -0.7153118848800659)),
#     ((13.306536674499512, -5.8895697593688965, -5.714186668395996),
#      (-0.0031149201095104218, -0.22585536539554596, -0.974155843257904)), (
#         (13.09268856048584, -6.323978424072266, -5.603431224822998),
#         (0.007304081227630377, -0.268837571144104, -0.9631578326225281)), (
#         (-6.935081481933594, -13.520472526550293, -4.506632328033447),
#         (-0.2680089771747589, -0.6690917611122131, -0.693172037601471)), (
#         (-6.42642068862915, -7.620792865753174, -6.003060340881348),
#         (0.038726091384887695, -0.1052844449877739, -0.9936878681182861)), (
#         (-6.518202304840088, -8.127269744873047, -5.969344139099121),
#         (-0.013047886081039906, -0.08475624769926071, -0.9963163733482361)), (
#         (15.397491455078125, 1.3811067342758179, -6.639054775238037),
#         (0.29204535484313965, -0.2884875237941742, -0.9118576645851135)), (
#         (12.664124488830566, -6.890064239501953, -5.4441962242126465),
#         (-0.04317208379507065, -0.3005923330783844, -0.9527751207351685)), (
#         (-3.7880446910858154, 2.7042014598846436, -5.940113067626953),
#         (-0.2427949607372284, 0.7635230422019958, -0.5984005331993103)), (
#         (-4.103152751922607, 2.5893826484680176, -5.936269283294678),
#         (-0.2209039032459259, 0.6706976890563965, -0.7080720067024231)), (
#         (3.717918872833252, -11.19593620300293, -3.9501760005950928),
#         (0.18694885075092316, -0.19792664051055908, -0.9622240662574768)), (
#         (4.241807460784912, -11.128814697265625, -3.8831946849823),
#         (0.1030072495341301, -0.198526531457901, -0.974667489528656)), (
#         (-5.291518688201904, 1.8575083017349243, -6.307031154632568),
#         (0.0056350501254200935, 0.5949352383613586, -0.8037537932395935)), (
#         (-5.5874223709106445, 1.4947807788848877, -6.588447093963623),
#         (0.02103206142783165, 0.512485682964325, -0.8584381341934204)), (
#         (0.9260059595108032, 4.90950870513916, -6.583316802978516),
#         (-0.8595861792564392, 0.4583653509616852, -0.22585998475551605)), (
#         (0.7094436883926392, 4.57454776763916, -6.754184722900391),
#         (-0.7473675012588501, 0.647135853767395, -0.15052242577075958)), (
#         (8.62091064453125, -10.279671669006348, -4.3546953201293945),
#         (-0.07663502544164658, -0.13396024703979492, -0.9880191087722778)), (
#         (9.058389663696289, -10.019227027893066, -4.413699626922607),
#         (-0.06564082205295563, -0.13456693291664124, -0.9887279868125916)), (
#         (14.69507122039795, 6.763702869415283, -6.635896682739258),
#         (0.3818292021751404, 0.4514085054397583, -0.8064966201782227)), (
#         (5.446869373321533, 13.427602767944336, -6.23151969909668),
#         (-0.013842619024217129, 0.27666768431663513, -0.9608659744262695)), (
#         (5.925361633300781, 13.149526596069336, -6.308176040649414),
#         (0.011295887641608715, 0.249200239777565, -0.9683861136436462)), (
#         (2.8517005443573, 14.997855186462402, -5.365652561187744),
#         (-0.028974222019314766, 0.6845568418502808, -0.7283833622932434)), (
#         (-7.353706359863281, -10.982269287109375, -5.643916606903076),
#         (-0.3020470142364502, -0.11424494534730911, -0.9464225769042969)), (
#         (-7.421008586883545, -11.292582511901855, -5.587276458740234),
#         (-0.3399485647678375, -0.18091706931591034, -0.922878086566925)), (
#         (-3.205118179321289, 2.7885830402374268, -6.057971000671387),
#         (-0.22698910534381866, 0.7858757972717285, -0.5752174854278564)), (
#         (2.4546756744384766, 15.16889476776123, -5.181893348693848),
#         (-0.08865316957235336, 0.7475902438163757, -0.6582168340682983)), (
#         (13.5491304397583, 7.9952006340026855, -6.417795181274414),
#         (0.2893212139606476, 0.47213736176490784, -0.8326941728591919)), (
#         (13.210657119750977, 8.264055252075195, -6.37751579284668),
#         (0.27293524146080017, 0.46220242977142334, -0.8437271118164062)), (
#         (15.385055541992188, 5.104590892791748, -7.077293872833252),
#         (0.3874160349369049, 0.26027533411979675, -0.884401261806488)), (
#         (-3.919257879257202, 9.075385093688965, -3.5313220024108887),
#         (-0.8604093194007874, -0.06655056029558182, -0.5052394866943359)), (
#         (9.316770553588867, -9.818811416625977, -4.461415767669678),
#         (-0.08705982565879822, -0.11321935057640076, -0.989748477935791)), (
#         (9.575151443481445, -9.618395805358887, -4.509131908416748),
#         (-0.0789598822593689, -0.14036740362644196, -0.9869459867477417)), (
#         (12.878405570983887, -6.607021331787109, -5.5238142013549805),
#         (-0.03640575706958771, -0.23895052075386047, -0.970349133014679)), (
#         (13.497801780700684, -5.453325271606445, -5.805058002471924),
#         (0.018108760938048363, -0.19094142317771912, -0.9814344048500061)), (
#         (13.767343521118164, -4.810052394866943, -5.9145402908325195),
#         (0.04252035543322563, -0.1612301915884018, -0.9860004782676697)), (
#         (13.63257122039795, -5.131689071655273, -5.859799385070801),
#         (0.029688086360692978, -0.17765648663043976, -0.9836446046829224)), (
#         (14.015840530395508, -4.243525505065918, -5.985100269317627),
#         (0.09916635602712631, -0.1289113610982895, -0.9866852760314941)), (
#         (14.251666069030762, -3.6299335956573486, -6.02722692489624),
#         (0.11019431054592133, -0.1007862240076065, -0.9887868165969849)), (
#         (14.133752822875977, -3.936729669570923, -6.006163597106934),
#         (0.10287860780954361, -0.10675039142370224, -0.988949179649353)), (
#         (14.468205451965332, -3.076077699661255, -6.0517048835754395),
#         (0.13812211155891418, -0.08100603520870209, -0.9870969653129578)), (
#         (14.656460762023926, -2.5544729232788086, -6.063515663146973),
#         (0.16011345386505127, -0.07424736768007278, -0.9843022227287292)), (
#         (14.852493286132812, -1.9437276124954224, -6.069851875305176),
#         (0.20059771835803986, -0.0781976580619812, -0.9765478372573853)), (
#         (14.754477500915527, -2.2491002082824707, -6.066683769226074),
#         (0.17250850796699524, -0.06101684272289276, -0.9831162691116333)), (
#         (14.988574028015137, -1.429298758506775, -6.0789690017700195),
#         (0.21648162603378296, -0.09503310173749924, -0.9716503024101257)), (
#         (15.120471000671387, -0.8218900561332703, -6.125232219696045),
#         (0.232815220952034, -0.1599799394607544, -0.9592723846435547)), (
#         (15.19726848602295, -0.3001768887042999, -6.216426372528076),
#         (0.2283736914396286, -0.20946721732616425, -0.9507728219032288)), (
#         (15.251904487609863, 0.15033407509326935, -6.308818340301514),
#         (0.23539872467517853, -0.25458824634552, -0.9379618167877197)), (
#         (15.301040649414062, 0.606304407119751, -6.427972316741943),
#         (0.2517433762550354, -0.27715879678726196, -0.9272585511207581)), (
#         (15.355938911437988, 1.0682933330535889, -6.552335262298584),
#         (0.2789860665798187, -0.28445231914520264, -0.917198896408081)), (
#         (15.439043045043945, 1.6939201354980469, -6.725773811340332),
#         (0.3022967576980591, -0.2826397716999054, -0.9103468656539917)), (
#         (15.525835037231445, 2.4168930053710938, -6.908332347869873),
#         (0.33655020594596863, -0.22782820463180542, -0.913689374923706)), (
#         (15.482439041137695, 2.0554068088531494, -6.817053318023682),
#         (0.3120071291923523, -0.2632584571838379, -0.9128782153129578)), (
#         (15.564772605895996, 2.9430480003356934, -7.008388996124268),
#         (0.37764492630958557, -0.15897496044635773, -0.9122013449668884)), (
#         (15.565176963806152, 3.6458444595336914, -7.107742786407471),
#         (0.3963403105735779, -0.07899447530508041, -0.9146990180015564)), (
#         (15.564974784851074, 3.2944462299346924, -7.058066368103027),
#         (0.37250593304634094, -0.12967316806316376, -0.9189257025718689)), (
#         (15.514050483703613, 4.2422685623168945, -7.152979850769043),
#         (0.4093541204929352, 0.03466130048036575, -0.911716878414154)), (
#         (15.458035469055176, 4.644193649291992, -7.140054702758789),
#         (0.3891081213951111, 0.13040240108966827, -0.9119156002998352)), (
#         (15.276824951171875, 5.562228202819824, -6.960997581481934),
#         (0.4075985848903656, 0.3506464660167694, -0.8431550860404968)), (
#         (15.145044326782227, 5.934391021728516, -6.857550621032715),
#         (0.4008673429489136, 0.40317854285240173, -0.8226495981216431)), (
#         (14.958012580871582, 6.3167500495910645, -6.750768184661865),
#         (0.38262197375297546, 0.4306630790233612, -0.817392110824585)), (
#         (14.399347305297852, 7.179637432098389, -6.546294212341309),
#         (0.40452826023101807, 0.4603087902069092, -0.7902357578277588)), (
#         (14.008864402770996, 7.593435287475586, -6.480569839477539),
#         (0.33376479148864746, 0.4671248495578766, -0.8187767863273621)), (
#         (12.729549407958984, 8.605428695678711, -6.337126731872559),
#         (0.23519767820835114, 0.44050195813179016, -0.8663948178291321)), (
#         (12.226119995117188, 8.948400497436523, -6.296384334564209),
#         (0.22830283641815186, 0.424355149269104, -0.8762422800064087)), (
#         (11.841256141662598, 9.197643280029297, -6.277912616729736),
#         (0.22612448036670685, 0.3900949954986572, -0.8925769329071045)), (
#         (11.33975601196289, 9.525345802307129, -6.268913745880127),
#         (0.23696430027484894, 0.3653469979763031, -0.9002051949501038)), (
#         (10.806117057800293, 9.87354850769043, -6.279690265655518),
#         (0.2404005080461502, 0.3252725601196289, -0.9145520329475403)), (
#         (10.426429748535156, 10.133564949035645, -6.291011333465576),
#         (0.26108211278915405, 0.277248352766037, -0.9246455430984497)), (
#         (10.076350212097168, 10.382973670959473, -6.325659275054932),
#         (0.26587504148483276, 0.23968194425106049, -0.9337360858917236)), (
#         (9.655067443847656, 10.688039779663086, -6.365099906921387),
#         (0.2592304050922394, 0.22519153356552124, -0.9391955733299255)), (
#         (9.086807250976562, 11.096123695373535, -6.4229912757873535),
#         (0.24329744279384613, 0.22237610816955566, -0.9441161751747131)), (
#         (9.37093734741211, 10.892081260681152, -6.394045352935791),
#         (0.25335627794265747, 0.21365487575531006, -0.9434840083122253)), (
#         (8.641408920288086, 11.40377140045166, -6.454433917999268),
#         (0.20069116353988647, 0.22051680088043213, -0.9545130729675293)), (
#         (7.996158123016357, 11.856390953063965, -6.476990699768066),
#         (0.14207790791988373, 0.20696943998336792, -0.9679759740829468)), (
#         (8.3187837600708, 11.630081176757812, -6.465712070465088),
#         (0.1838359236717224, 0.19701515138149261, -0.9630105495452881)), (
#         (7.531126499176025, 12.187920570373535, -6.454187870025635),
#         (0.10973230004310608, 0.2373039722442627, -0.9652178883552551)), (
#         (7.004680633544922, 12.534635543823242, -6.417690753936768),
#         (0.08403966575860977, 0.2762770652770996, -0.9573965668678284)), (
#         (6.326045513153076, 12.925848007202148, -6.357517719268799),
#         (0.040696002542972565, 0.24189139902591705, -0.9694495797157288)), (
#         (6.66536283493042, 12.730241775512695, -6.387604236602783),
#         (0.06551463901996613, 0.238918274641037, -0.9688271284103394)), (
#         (4.863846778869629, 13.787590980529785, -6.101531982421875),
#         (-0.03485426306724548, 0.32748785614967346, -0.9442123174667358)), (
#         (5.15535831451416, 13.607596397399902, -6.166525363922119),
#         (-0.02419629693031311, 0.30908381938934326, -0.9507269859313965)), (
#         (4.411404609680176, 14.071084022521973, -5.972622871398926),
#         (-0.04471580684185028, 0.3905743360519409, -0.9194847345352173)), (
#         (4.085301876068115, 14.279031753540039, -5.872753143310547),
#         (0.013066046871244907, 0.44212526082992554, -0.8968582153320312)), (
#         (3.6860408782958984, 14.537758827209473, -5.72934627532959),
#         (-0.003958249930292368, 0.5363315343856812, -0.8439981341362)), (
#         (3.360055685043335, 14.73710823059082, -5.594220161437988),
#         (-0.0003290957538411021, 0.6009325981140137, -0.7992997169494629)), (
#         (1.8314259052276611, 15.341811180114746, -4.8248724937438965),
#         (-0.19655382633209229, 0.8183718323707581, -0.5400317311286926)), (
#         (2.1430509090423584, 15.255352973937988, -5.003382682800293),
#         (-0.15634068846702576, 0.7804295420646667, -0.6053818464279175)), (
#         (1.4135136604309082, 15.390230178833008, -4.490506172180176),
#         (-0.31235015392303467, 0.876169741153717, -0.36710232496261597)), (
#         (0.9901033639907837, 15.338482856750488, -4.154697418212891),
#         (-0.3172990679740906, 0.9104175567626953, -0.2654455304145813)), (
#         (0.5078386664390564, 15.243048667907715, -3.9218192100524902),
#         (-0.29706260561943054, 0.9144459962844849, -0.27484965324401855)), (
#         (-0.11367855221033096, 15.115622520446777, -3.7099928855895996),
#         (-0.36688584089279175, 0.8931063413619995, -0.26029935479164124)), (
#         (0.19708004593849182, 15.179335594177246, -3.815906047821045),
#         (-0.2956447899341583, 0.91045743227005, -0.28924286365509033)), (
#         (-0.5847912430763245, 14.93114185333252, -3.4778859615325928),
#         (-0.48681530356407166, 0.857461154460907, -0.16664664447307587)), (
#         (-1.0630874633789062, 14.678736686706543, -3.215823173522949),
#         (-0.546110212802887, 0.8340674638748169, -0.07807137817144394)), (
#         (-1.436532974243164, 14.432154655456543, -3.031360626220703),
#         (-0.5789718627929688, 0.8129338622093201, -0.06269044429063797)), (
#         (-1.8914464712142944, 14.106386184692383, -2.832854986190796),
#         (-0.6172764897346497, 0.7851894497871399, -0.049470387399196625)), (
#         (-2.3544259071350098, 13.733508110046387, -2.675690174102783),
#         (-0.6476678848266602, 0.7618686556816101, -0.00907797273248434)), (
#         (-2.869800567626953, 13.259477615356445, -2.5896222591400146),
#         (-0.7120678424835205, 0.7012092471122742, -0.03556695953011513)), (
#         (-2.6121132373809814, 13.496493339538574, -2.6326560974121094),
#         (-0.6766310930252075, 0.7335811257362366, -0.0634760707616806)), (
#         (-3.312136173248291, 12.767255783081055, -2.5746946334838867),
#         (-0.7810474038124084, 0.6200759410858154, -0.07396484911441803)), (
#         (-3.090968370437622, 13.01336669921875, -2.582158327102661),
#         (-0.7388120889663696, 0.6694618463516235, -0.07731455564498901)), (
#         (-3.658174991607666, 12.294032096862793, -2.616373062133789),
#         (-0.8515339493751526, 0.5150896906852722, -0.09783951938152313)), (
#         (-3.908780813217163, 11.84496784210205, -2.7010488510131836),
#         (-0.8724278211593628, 0.4597966969013214, -0.16570045053958893)), (
#         (-4.060799598693848, 11.446060180664062, -2.781268835067749),
#         (-0.9093069434165955, 0.3375420868396759, -0.24336448311805725)), (
#         (-4.155004501342773, 11.012839317321777, -2.852635145187378),
#         (-0.9494574069976807, 0.18086016178131104, -0.25655436515808105)), (
#         (-4.1818742752075195, 10.462800979614258, -2.9575114250183105),
#         (-0.9556730389595032, 0.07291796058416367, -0.2852577567100525)), (
#         (-4.1603875160217285, 9.977638244628906, -3.0848426818847656),
#         (-0.9461425542831421, 0.014311028644442558, -0.3234337270259857)), (
#         (-4.067920207977295, 9.4597806930542, -3.3008170127868652),
#         (-0.9086523652076721, -0.029607223346829414, -0.41650253534317017)), (
#         (-2.845214366912842, 8.083857536315918, -4.400768280029297),
#         (-0.5231507420539856, -0.2532101571559906, -0.8137555122375488)), (
#         (-3.113058567047119, 8.22906494140625, -4.248122692108154),
#         (-0.5613251328468323, -0.19191594421863556, -0.8050355911254883)), (
#         (-2.349372625350952, 7.910211563110352, -4.577332973480225),
#         (-0.3830653131008148, -0.2795068621635437, -0.8804185390472412)), (
#         (-1.963693618774414, 7.7979655265808105, -4.693563461303711),
#         (-0.35818570852279663, -0.27158570289611816, -0.8932772278785706)), (
#         (-1.543560266494751, 7.675747871398926, -4.821074485778809),
#         (-0.3447515070438385, -0.25559794902801514, -0.9032253623008728)), (
#         (-1.0717955827713013, 7.546049118041992, -4.963476181030273),
#         (-0.40760618448257446, -0.18868744373321533, -0.8934507966041565)), (
#         (-0.6275960803031921, 7.375473976135254, -5.15614128112793),
#         (-0.4868571162223816, -0.08587217330932617, -0.8692502975463867)), (
#         (-0.0008672714466229081, 6.99412202835083, -5.537491798400879),
#         (-0.5214946866035461, -0.028920453041791916, -0.8527643084526062)), (
#         (-0.3142316937446594, 7.184798240661621, -5.3468170166015625),
#         (-0.5463706254959106, -0.07437144964933395, -0.8342350125312805)), (
#         (0.507379949092865, 6.5226545333862305, -5.8350443840026855),
#         (-0.5796027183532715, -0.009207255207002163, -0.8148472309112549)), (
#         (0.25325635075569153, 6.758388042449951, -5.686267852783203),
#         (-0.5443052649497986, -0.0860685259103775, -0.8344602584838867)), (
#         (0.8972234129905701, 5.884597301483154, -6.134481430053711),
#         (-0.7573294639587402, -0.003928242716938257, -0.6530211567878723)), (
#         (0.7023016810417175, 6.203625679016113, -5.984762668609619),
#         (-0.6589189767837524, -0.1109730526804924, -0.7439831495285034)), (
#         (1.00902259349823, 5.296072959899902, -6.3913493156433105),
#         (-0.8859135508537292, 0.1959928721189499, -0.4204091727733612)), (
#         (0.9531229138374329, 5.590335369110107, -6.262915134429932),
#         (-0.8426186442375183, 0.052389129996299744, -0.5359562635421753)), (
#         (0.45636239647865295, 4.328452110290527, -6.8229756355285645),
#         (-0.6727098822593689, 0.7324672341346741, -0.10465764999389648)), (
#         (-0.025934362784028053, 3.920870780944824, -6.862936973571777),
#         (-0.649814248085022, 0.7418937683105469, -0.165333092212677)), (
#         (-0.44148850440979004, 3.5918681621551514, -6.788408279418945),
#         (-0.5784900188446045, 0.8016536235809326, -0.15066739916801453)), (
#         (-0.9109136462211609, 3.3122401237487793, -6.667520046234131),
#         (-0.4645799994468689, 0.8687025308609009, -0.17181746661663055)), (
#         (-1.488869309425354, 3.082563638687134, -6.528072834014893),
#         (-0.3261314928531647, 0.9138145446777344, -0.24203555285930634)), (
#         (-1.9810752868652344, 2.9478609561920166, -6.426019668579102),
#         (-0.3017530143260956, 0.8719492554664612, -0.38555097579956055)), (
#         (-2.549713134765625, 2.838163137435913, -6.256977081298828),
#         (-0.2597988545894623, 0.8345859050750732, -0.4857683777809143)), (
#         (-2.877415657043457, 2.81337308883667, -6.157474517822266),
#         (-0.19817273318767548, 0.8131222128868103, -0.5473207235336304)), (
#         (-4.418260097503662, 2.4745638370513916, -5.932425022125244),
#         (-0.21368122100830078, 0.7140989899635315, -0.6666354537010193)), (
#         (-4.944849014282227, 2.178593635559082, -6.0721540451049805),
#         (-0.1123286783695221, 0.65819251537323, -0.7444225549697876)), (
#         (-5.819065570831299, 1.0635372400283813, -6.790013313293457),
#         (-0.026998039335012436, 0.37313464283943176, -0.9273843765258789)), (
#         (-5.9834160804748535, 0.5899946093559265, -6.960700988769531),
#         (-0.006840577814728022, 0.32173702120780945, -0.9468042850494385)), (
#         (-6.1041154861450195, -0.012370026670396328, -7.155719757080078),
#         (0.010792771354317665, 0.2711871862411499, -0.9624660611152649)), (
#         (-6.043765544891357, 0.2888122797012329, -7.058210849761963),
#         (0.029855875298380852, 0.3027065694332123, -0.9526160359382629)), (
#         (-6.1763916015625, -0.6199460625648499, -7.3055877685546875),
#         (0.02716371975839138, 0.18631532788276672, -0.9821144938468933)), (
#         (-6.246722221374512, -1.3608505725860596, -7.4096598625183105),
#         (0.03637890890240669, 0.03336373716592789, -0.9987809658050537)), (
#         (-6.211556911468506, -0.9903982877731323, -7.35762357711792),
#         (0.03755226731300354, 0.1374211460351944, -0.9898006319999695)), (
#         (-6.301331996917725, -1.787058711051941, -7.383337497711182),
#         (0.015318566933274269, -0.11845991760492325, -0.9928406476974487)), (
#         (-6.419271945953369, -2.4965991973876953, -7.240077972412109),
#         (0.015037225559353828, -0.2934887409210205, -0.9558442234992981)), (
#         (-6.360301971435547, -2.141829013824463, -7.311707973480225),
#         (0.006118928547948599, -0.19014668464660645, -0.9817365407943726)), (
#         (-6.599145412445068, -3.079159736633301, -6.982796669006348),
#         (-0.009737036190927029, -0.4078347980976105, -0.9130038022994995)), (
#         (-6.509208679199219, -2.787879467010498, -7.111437797546387),
#         (-0.03564470633864403, -0.38441306352615356, -0.9224727749824524)), (
#         (-6.7654314041137695, -3.571754217147827, -6.749355792999268),
#         (-0.008026812225580215, -0.353054404258728, -0.9355683922767639)), (
#         (-6.789860725402832, -4.1735005378723145, -6.5872578620910645),
#         (0.06277596950531006, -0.23303842544555664, -0.9704391956329346)), (
#         (-6.713405132293701, -4.732272148132324, -6.475088119506836),
#         (0.11021300405263901, -0.16579803824424744, -0.9799817204475403)), (
#         (-6.626896858215332, -5.151517868041992, -6.399052619934082),
#         (0.1276441365480423, -0.1538548469543457, -0.9798141121864319)), (
#         (-6.523571968078613, -5.68840217590332, -6.296528339385986),
#         (0.12063373625278473, -0.16072197258472443, -0.9795998334884644)), (
#         (-6.420942783355713, -6.357927322387695, -6.173305034637451),
#         (0.10573241859674454, -0.15592677891254425, -0.9820933938026428)), (
#         (-6.472257137298584, -6.023164749145508, -6.234916687011719),
#         (0.09962990134954453, -0.16825389862060547, -0.9806960225105286)), (
#         (-6.376275062561035, -6.941102504730225, -6.081442356109619),
#         (0.12143366038799286, -0.11743736267089844, -0.9856278896331787)), (
#         (-6.401347637176514, -7.280947685241699, -6.042251110076904),
#         (0.03682281821966171, -0.1376897543668747, -0.9897907972335815)), (
#         (-6.639857769012451, -8.605504989624023, -5.935605049133301),
#         (-0.08424019813537598, -0.051194582134485245, -0.9951294660568237)), (
#         (-6.794455051422119, -9.114970207214355, -5.901371479034424),
#         (-0.14815568923950195, -0.051581352949142456, -0.9876179099082947)), (
#         (-6.939048767089844, -9.53994369506836, -5.856614589691162),
#         (-0.20831015706062317, -0.04157144948840141, -0.9771789908409119)), (
#         (-7.12832498550415, -10.1124267578125, -5.790027618408203),
#         (-0.26673996448516846, -0.06359262019395828, -0.9616681933403015)), (
#         (-7.286404609680176, -10.671957015991211, -5.700556755065918),
#         (-0.3111650347709656, -0.09248371422290802, -0.9458451271057129)), (
#         (-7.4928812980651855, -11.982843399047852, -5.37400484085083),
#         (-0.39565637707710266, -0.34899064898490906, -0.8495066165924072)), (
#         (-7.456944465637207, -11.637713432312012, -5.480640411376953),
#         (-0.3385273218154907, -0.2633456587791443, -0.9033539295196533)), (
#         (-7.440666198730469, -12.632780075073242, -5.041562557220459),
#         (-0.37046825885772705, -0.5083370804786682, -0.7773973941802979)), (
#         (-7.466773986816406, -12.30781078338623, -5.207783222198486),
#         (-0.34152472019195557, -0.4302739202976227, -0.8355987668037415)), (
#         (-7.148633003234863, -12.610745429992676, -4.854461669921875),
#         (0.5357465744018555, -0.2892284691333771, -0.7932984828948975)), (
#         (-7.216585636138916, -13.163357734680176, -4.714267730712891),
#         (-0.3458242118358612, -0.5994776487350464, -0.7218255400657654)), (
#         (-7.328625679016113, -12.89806842803955, -4.877914905548096),
#         (-0.28771576285362244, -0.5952732563018799, -0.7502462267875671)), (
#         (-6.507818698883057, -13.83551025390625, -4.3201704025268555),
#         (-0.20015400648117065, -0.7419414520263672, -0.6398915648460388)), (
#         (-5.997337341308594, -14.053603172302246, -4.209532260894775),
#         (-0.14960400760173798, -0.7696647644042969, -0.6206728219985962)), (
#         (-5.571229457855225, -14.159418106079102, -4.154720783233643),
#         (-0.08077661693096161, -0.7975022792816162, -0.5978839993476868)), (
#         (-4.991879940032959, -14.203085899353027, -4.135111331939697),
#         (-0.024426737800240517, -0.8000279664993286, -0.5994653105735779)), (
#         (-4.406278133392334, -14.18621826171875, -4.198268890380859),
#         (-0.07654794305562973, -0.7841626405715942, -0.6158159375190735)), (
#         (-3.850712537765503, -14.159637451171875, -4.334346294403076),
#         (-0.13111966848373413, -0.7979528307914734, -0.5882848501205444)), (
#         (-3.163975954055786, -14.081354141235352, -4.6285786628723145),
#         (-0.15644069015979767, -0.789043664932251, -0.5940845012664795)), (
#         (-3.5073440074920654, -14.120495796203613, -4.481462478637695),
#         (-0.17341552674770355, -0.7698686122894287, -0.6141899824142456)), (
#         (-2.5729470252990723, -13.966147422790527, -4.914556503295898),
#         (-0.10618529468774796, -0.7841417193412781, -0.6114299297332764)), (
#         (-2.8684613704681396, -14.023750305175781, -4.7715678215026855),
#         (-0.13743393123149872, -0.7750697731971741, -0.6167485117912292)), (
#         (-2.0606541633605957, -13.82714557647705, -5.128925323486328),
#         (-0.01161906123161316, -0.751783549785614, -0.6593075394630432)), (
#         (-1.6228026151657104, -13.67015552520752, -5.272737503051758),
#         (0.08422212302684784, -0.6970829367637634, -0.7120267152786255)), (
#         (-1.1591249704360962, -13.477304458618164, -5.353235721588135),
#         (0.24110302329063416, -0.6220942139625549, -0.7448947429656982)), (
#         (-0.6723743081092834, -13.225735664367676, -5.3172993659973145),
#         (0.401067316532135, -0.5265950560569763, -0.7495617270469666)), (
#         (-0.12990543246269226, -12.904779434204102, -5.14794397354126),
#         (0.5166665315628052, -0.44158196449279785, -0.7335264682769775)), (
#         (-0.40113988518714905, -13.06525707244873, -5.232621669769287),
#         (0.48644858598709106, -0.48802700638771057, -0.724705159664154)), (
#         (0.5172716379165649, -12.52586841583252, -4.893607139587402),
#         (0.5196179151535034, -0.39470726251602173, -0.7577620148658752)), (
#         (0.19368310272693634, -12.715323448181152, -5.020775318145752),
#         (0.5193719863891602, -0.42601102590560913, -0.7407883405685425)), (
#         (1.0811249017715454, -12.224574089050293, -4.6774163246154785),
#         (0.48065048456192017, -0.3757692277431488, -0.7923210859298706)), (
#         (0.7991982698440552, -12.375221252441406, -4.785511493682861),
#         (0.4976973235607147, -0.389376163482666, -0.7750378251075745)), (
#         (1.448569655418396, -12.042891502380371, -4.544405937194824),
#         (0.4587419331073761, -0.3678062856197357, -0.8088722229003906)), (
#         (2.1137490272521973, -11.725000381469727, -4.330318927764893),
#         (0.39153853058815, -0.32184112071990967, -0.8620416522026062)), (
#         (1.7811592817306519, -11.883946418762207, -4.4373626708984375),
#         (0.42214179039001465, -0.3474905788898468, -0.8372852206230164)), (
#         (2.6960151195526123, -11.486844062805176, -4.180538177490234),
#         (0.33181145787239075, -0.28369849920272827, -0.8996756672859192)), (
#         (2.4048821926116943, -11.605921745300293, -4.255428791046143),
#         (0.34509503841400146, -0.3126790225505829, -0.88495272397995)), (
#         (3.177689552307129, -11.326494216918945, -4.064032554626465),
#         (0.2750304341316223, -0.24273847043514252, -0.9302882552146912)), (
#         (4.841940402984619, -11.076727867126465, -3.86128830909729),
#         (0.002391292480751872, -0.20457376539707184, -0.9788482785224915)), (
#         (5.318578720092773, -11.048727989196777, -3.8875396251678467),
#         (-0.06495228409767151, -0.2084806114435196, -0.9758673906326294)), (
#         (5.822727680206299, -11.007675170898438, -3.941732168197632),
#         (-0.08998636901378632, -0.1919126659631729, -0.9772778749465942)), (
#         (6.2316508293151855, -10.967765808105469, -3.990170955657959),
#         (-0.10376172512769699, -0.19490495324134827, -0.9753182530403137)), (
#         (6.739208221435547, -10.8900146484375, -4.064700126647949),
#         (-0.10482285171747208, -0.17200849950313568, -0.9795025587081909)), (
#         (7.25075101852417, -10.796920776367188, -4.134873867034912),
#         (-0.10809451341629028, -0.18008945882320404, -0.9776929020881653)), (
#         (7.718608379364014, -10.668254852294922, -4.216110706329346),
#         (-0.10383804142475128, -0.1749916672706604, -0.9790789484977722)), (
#         (8.162903785705566, -10.519841194152832, -4.282898426055908),
#         (-0.08059731870889664, -0.18720939755439758, -0.9790080189704895)), (
#         (10.016336441040039, -9.236197471618652, -4.59490442276001),
#         (-0.07603146880865097, -0.13105230033397675, -0.988455593585968)), (
#         (10.442526817321777, -8.835067749023438, -4.6831817626953125),
#         (-0.09234017878770828, -0.1387050896883011, -0.9860193729400635)), (
#         (10.850831985473633, -8.453397750854492, -4.78000020980835),
#         (-0.14779233932495117, -0.15781202912330627, -0.9763467311859131)), (
#         (11.232985496520996, -8.126579284667969, -4.904430866241455),
#         (-0.14421923458576202, -0.21504716575145721, -0.9658963084220886)), (
#         (11.60472297668457, -7.821676254272461, -5.038125514984131),
#         (-0.12136989831924438, -0.25396019220352173, -0.95956951379776)), (
#         (11.929610252380371, -7.558956146240234, -5.158660411834717),
#         (-0.11657946556806564, -0.29084768891334534, -0.9496403932571411)), (
#         (12.351286888122559, -7.207352161407471, -5.312367916107178),
#         (-0.07718303054571152, -0.30992624163627625, -0.947622537612915))
# ]
border_vert_co_and_normal = [((-2.4524667263031006, 8.037524223327637, -4.202472686767578), (-0.40262970328330994, -0.7630082368850708, -0.5056755542755127)), ((-3.189103603363037, 8.406002044677734, -3.7534568309783936), (-0.7612749338150024, -0.624113917350769, -0.17590464651584625)), ((-3.6119959354400635, 9.053285598754883, -3.207775592803955), (-0.9149531126022339, -0.3793942630290985, 0.13755251467227936)), ((-3.6906697750091553, 9.656052589416504, -2.775235176086426), (-0.9004908800125122, -0.2214166671037674, 0.37428703904151917)), ((-3.6796090602874756, 10.290327072143555, -2.5441911220550537), (-0.8772240877151489, -0.019902322441339493, 0.479668527841568)), ((-3.546583890914917, 10.844295501708984, -2.3826589584350586), (-0.8177085518836975, 0.1776888519525528, 0.5475211143493652)), ((-3.4228498935699463, 11.266737937927246, -2.331822156906128), (-0.766563355922699, 0.21715693175792694, 0.6043373346328735)), ((-3.2690887451171875, 11.664029121398926, -2.3080697059631348), (-0.7097743153572083, 0.3109472095966339, 0.6320856213569641)), ((-3.123157024383545, 12.006698608398438, -2.3127739429473877), (-0.7132496237754822, 0.3100937306880951, 0.6285832524299622)), ((-2.7992279529571533, 12.541913986206055, -2.3371548652648926), (-0.5576633810997009, 0.4815751910209656, 0.676089346408844)), ((-2.4199490547180176, 13.029330253601074, -2.4286398887634277), (-0.41061899065971375, 0.6076001524925232, 0.6798633337020874)), ((-2.0182905197143555, 13.532931327819824, -2.6718862056732178), (-0.3275633454322815, 0.6646520495414734, 0.6715205907821655)), ((-1.5957549810409546, 13.994171142578125, -2.9579310417175293), (-0.2821500599384308, 0.7272164821624756, 0.6257375478744507)), ((-1.319612979888916, 14.153730392456055, -3.0387580394744873), (-0.24434557557106018, 0.74019855260849, 0.6264194250106812)), ((-1.0422860383987427, 14.309700012207031, -3.1226229667663574), (-0.1960579752922058, 0.7409763336181641, 0.6422736048698425)), ((-0.5696468353271484, 14.518099784851074, -3.2815561294555664), (-0.12656842172145844, 0.8064904808998108, 0.577540934085846)), ((-0.09424900263547897, 14.70892333984375, -3.4530770778656006), (-0.11766470223665237, 0.8136171102523804, 0.5693699717521667)), ((0.4188186824321747, 14.838747024536133, -3.6189489364624023), (-0.022871574386954308, 0.8889359831809998, 0.45746010541915894)), ((0.9325219988822937, 14.943866729736328, -3.7975339889526367), (0.03313567861914635, 0.9225844740867615, 0.384369432926178)), ((1.4373786449432373, 15.016488075256348, -4.020472049713135), (0.043403420597314835, 0.9168171882629395, 0.39694151282310486)), ((1.9400919675827026, 15.043839454650879, -4.2630109786987305), (0.1915607452392578, 0.9424740076065063, 0.27394741773605347)), ((2.404057741165161, 14.982595443725586, -4.390927314758301), (0.24961648881435394, 0.9529363512992859, 0.1720576137304306)), ((2.8634138107299805, 14.88355827331543, -4.55575704574585), (0.27858439087867737, 0.960387110710144, 0.006880823988467455)), ((3.3144404888153076, 14.748059272766113, -4.70359992980957), (0.29775384068489075, 0.9545696377754211, -0.01180911436676979)), ((3.753746747970581, 14.591874122619629, -4.916004657745361), (0.28044864535331726, 0.9210543036460876, -0.2701992988586426)), ((4.183808326721191, 14.39433765411377, -5.077510356903076), (0.2749275267124176, 0.8923407196998596, -0.357970267534256)), ((4.61724853515625, 14.174215316772461, -5.2284722328186035), (0.29784297943115234, 0.8475522398948669, -0.4392549991607666)), ((5.043235778808594, 13.946385383605957, -5.360770225524902), (0.30589306354522705, 0.8201949000358582, -0.4834352135658264)), ((5.466044902801514, 13.69710636138916, -5.488178730010986), (0.31895193457603455, 0.7720614671707153, -0.5497187376022339)), ((5.881783485412598, 13.437621116638184, -5.605529308319092), (0.3162960708141327, 0.7247315645217896, -0.6121445894241333)), ((6.30906867980957, 13.169400215148926, -5.690971851348877), (0.3793207108974457, 0.7021373510360718, -0.6025934815406799)), ((6.712873935699463, 12.892032623291016, -5.7640790939331055), (0.3761657476425171, 0.7083095908164978, -0.5973246097564697)), ((7.125036716461182, 12.604413986206055, -5.828924655914307), (0.41834235191345215, 0.6992841958999634, -0.5796475410461426)), ((7.528140544891357, 12.299099922180176, -5.880481243133545), (0.4636756479740143, 0.6829373836517334, -0.5644478797912598)), ((7.922765254974365, 11.987273216247559, -5.927358627319336), (0.488547146320343, 0.668317437171936, -0.5609574913978577)), ((8.313337326049805, 11.669456481933594, -5.965511798858643), (0.5200785994529724, 0.659409761428833, -0.5428601503372192)), ((8.693058013916016, 11.339168548583984, -5.993213653564453), (0.5514662861824036, 0.6497480273246765, -0.5231752991676331)), ((9.069087982177734, 11.008218765258789, -6.019508361816406), (0.5569279193878174, 0.6759569644927979, -0.4826110005378723)), ((9.449124336242676, 10.679544448852539, -6.051191329956055), (0.5690030455589294, 0.6953057050704956, -0.4390735924243927)), ((9.830979347229004, 10.35207748413086, -6.086946487426758), (0.5808348059654236, 0.7175060510635376, -0.3844683766365051)), ((10.219486236572266, 10.02961540222168, -6.127377033233643), (0.5589351654052734, 0.7528654932975769, -0.3475414216518402)), ((10.618195533752441, 9.720091819763184, -6.174502372741699), (0.5218167304992676, 0.7937194108963013, -0.3125969469547272)), ((11.024223327636719, 9.428936004638672, -6.227072238922119), (0.527946949005127, 0.792110025882721, -0.30632326006889343)), ((11.432989120483398, 9.145708084106445, -6.281611442565918), (0.5184890031814575, 0.817013680934906, -0.25230517983436584)), ((11.842052459716797, 8.870647430419922, -6.338931560516357), (0.5070933699607849, 0.8245838284492493, -0.25083401799201965)), ((12.251548767089844, 8.595674514770508, -6.394364356994629), (0.5274760127067566, 0.8185788989067078, -0.227370947599411)), ((12.659550666809082, 8.319034576416016, -6.438678741455078), (0.5541664361953735, 0.8148720860481262, -0.1699496954679489)), ((13.055801391601562, 8.036456108093262, -6.494851589202881), (0.5614855885505676, 0.8084651827812195, -0.17640283703804016)), ((13.456512451171875, 7.718694686889648, -6.546116828918457), (0.6229527592658997, 0.7621706128120422, -0.17614123225212097)), ((13.834610939025879, 7.3873796463012695, -6.594435691833496), (0.6590945720672607, 0.7311948537826538, -0.17592132091522217)), ((14.212748527526855, 6.990335941314697, -6.628629207611084), (0.7469183206558228, 0.644424557685852, -0.1637982726097107)), ((14.534690856933594, 6.537845611572266, -6.672299385070801), (0.8177701830863953, 0.5444501638412476, -0.1866171509027481)), ((14.796432495117188, 6.1121506690979, -6.713450908660889), (0.8302778005599976, 0.5157380104064941, -0.21131274104118347)), ((15.042763710021973, 5.599650859832764, -6.778243541717529), (0.877798855304718, 0.38678333163261414, -0.28260883688926697)), ((15.209301948547363, 5.098394870758057, -6.819424152374268), (0.8877565860748291, 0.31122228503227234, -0.3391592502593994)), ((15.334659576416016, 4.537053108215332, -6.847128868103027), (0.904056191444397, 0.15885914862155914, -0.39679476618766785)), ((15.405922889709473, 4.001555442810059, -6.8283305168151855), (0.9120907187461853, 0.050866346806287766, -0.406820684671402)), ((15.432717323303223, 3.4911866188049316, -6.792169094085693), (0.9130026698112488, -0.018438950181007385, -0.40753650665283203)), ((15.4196195602417, 2.958087682723999, -6.742530345916748), (0.9044775366783142, -0.1470412313938141, -0.4003739058971405)), ((15.361771583557129, 2.4713361263275146, -6.698443412780762), (0.8774141669273376, -0.203329399228096, -0.43451303243637085)), ((15.281874656677246, 1.9992473125457764, -6.629258155822754), (0.8670740723609924, -0.2461121678352356, -0.43314114212989807)), ((15.18979549407959, 1.5429607629776, -6.565275192260742), (0.8565238118171692, -0.24323183298110962, -0.4551980793476105)), ((15.095983505249023, 1.0852535963058472, -6.501328468322754), (0.8534993529319763, -0.2309599369764328, -0.4671149253845215)), ((15.003473281860352, 0.6225656867027283, -6.442293643951416), (0.8537630438804626, -0.22829604148864746, -0.4679417908191681)), ((14.911738395690918, 0.1591285765171051, -6.390437602996826), (0.8568154573440552, -0.2161545306444168, -0.46812885999679565)), ((14.822955131530762, -0.3052515387535095, -6.348653316497803), (0.8549977540969849, -0.1967860460281372, -0.4798479676246643)), ((14.724830627441406, -0.7711293697357178, -6.310545921325684), (0.8404646515846252, -0.20923016965389252, -0.4998418092727661)), ((14.615044593811035, -1.234965205192566, -6.268581867218018), (0.8403260707855225, -0.23334109783172607, -0.48928922414779663)), ((14.50101089477539, -1.6964809894561768, -6.241866111755371), (0.809341549873352, -0.2387261539697647, -0.5366339087486267)), ((14.377081871032715, -2.158167600631714, -6.2090349197387695), (0.8011540770530701, -0.2692999243736267, -0.5344432592391968)), ((14.230493545532227, -2.610866069793701, -6.175926208496094), (0.778516948223114, -0.2836454212665558, -0.559872031211853)), ((14.077872276306152, -3.0630295276641846, -6.14232063293457), (0.7670406103134155, -0.3100009262561798, -0.5617367029190063)), ((13.90507984161377, -3.511035680770874, -6.105591297149658), (0.7454671859741211, -0.348965048789978, -0.5678925514221191)), ((13.731925964355469, -3.9434752464294434, -6.083834171295166), (0.7319133281707764, -0.3223840594291687, -0.600309431552887)), ((13.519024848937988, -4.401065349578857, -6.040715217590332), (0.6726561188697815, -0.44404685497283936, -0.591908872127533)), ((13.283761024475098, -4.796473979949951, -6.042201995849609), (0.7055508494377136, -0.3983989655971527, -0.5860685706138611)), ((13.039084434509277, -5.192239761352539, -6.044153213500977), (0.6777418851852417, -0.41942542791366577, -0.6039440035820007)), ((12.778265953063965, -5.58751916885376, -6.037346363067627), (0.6482749581336975, -0.45807525515556335, -0.608199417591095)), ((12.49316120147705, -5.9733147621154785, -6.030880928039551), (0.5971798896789551, -0.4851335883140564, -0.6387657523155212)), ((12.16090202331543, -6.367173671722412, -5.98195743560791), (0.5113323330879211, -0.5965235829353333, -0.6186265349388123)), ((11.78557300567627, -6.717959403991699, -5.872579574584961), (0.41974347829818726, -0.7229637503623962, -0.548761248588562)), ((11.406169891357422, -7.004942893981934, -5.762633800506592), (0.35604122281074524, -0.775499701499939, -0.5213778018951416)), ((11.032096862792969, -7.256348133087158, -5.64180850982666), (0.346480131149292, -0.8074256181716919, -0.4775095582008362)), ((10.648161888122559, -7.485165596008301, -5.544238090515137), (0.30335208773612976, -0.7653834819793701, -0.5675963759422302)), ((10.272462844848633, -7.716685771942139, -5.433914661407471), (0.37608417868614197, -0.7239571809768677, -0.5783136487007141)), ((9.89417839050293, -7.969853401184082, -5.348110198974609), (0.3459359407424927, -0.6714597344398499, -0.6553396582603455)), ((9.526912689208984, -8.23912239074707, -5.285478115081787), (0.3917737603187561, -0.6147778630256653, -0.6845154762268066)), ((9.16407585144043, -8.52333927154541, -5.243536472320557), (0.38707804679870605, -0.6389933228492737, -0.6647241711616516)), ((8.77260971069336, -8.791947364807129, -5.197661399841309), (0.2687610983848572, -0.6746200919151306, -0.6874994039535522)), ((8.39773178100586, -9.02065372467041, -5.136980056762695), (0.3308183252811432, -0.5833517909049988, -0.7417948842048645)), ((7.997342586517334, -9.276155471801758, -5.105701446533203), (0.2794642746448517, -0.6361315250396729, -0.7191914319992065)), ((7.570889472961426, -9.503772735595703, -5.034520149230957), (0.172379270195961, -0.7445701956748962, -0.6449036002159119)), ((7.1465229988098145, -9.698946952819824, -4.943505764007568), (0.13414502143859863, -0.7482703924179077, -0.6496894955635071)), ((6.71651029586792, -9.85540771484375, -4.846092700958252), (0.08593921363353729, -0.7579213380813599, -0.6466603875160217)), ((6.2899017333984375, -9.991789817810059, -4.740972518920898), (0.06900126487016678, -0.7707306146621704, -0.6334139704704285)), ((5.862523078918457, -10.111231803894043, -4.633066654205322), (0.07059364020824432, -0.7947496771812439, -0.6028180122375488)), ((5.432253360748291, -10.217447280883789, -4.528927326202393), (0.07499397546052933, -0.7916622161865234, -0.6063389182090759)), ((5.001654624938965, -10.324350357055664, -4.435705184936523), (0.06972449272871017, -0.8031533360481262, -0.591678261756897)), ((4.562598705291748, -10.445086479187012, -4.365834712982178), (0.1304398477077484, -0.8173840045928955, -0.5611316561698914)), ((4.120433807373047, -10.563133239746094, -4.311770439147949), (0.1805325746536255, -0.8433975577354431, -0.5060520172119141)), ((3.6704208850860596, -10.704132080078125, -4.268163681030273), (0.26471152901649475, -0.8291848301887512, -0.49232128262519836)), ((3.221687078475952, -10.884085655212402, -4.2630109786987305), (0.39260679483413696, -0.8103886842727661, -0.43489107489585876)), ((2.810871124267578, -11.076805114746094, -4.273527145385742), (0.4120768904685974, -0.8320635557174683, -0.3712989389896393)), ((2.404498815536499, -11.281939506530762, -4.27736234664917), (0.436750203371048, -0.8204596638679504, -0.3689108192920685)), ((2.0022199153900146, -11.489653587341309, -4.298217296600342), (0.48073410987854004, -0.8303649425506592, -0.2817603349685669)), ((1.6150870323181152, -11.706648826599121, -4.310435771942139), (0.45886313915252686, -0.8375881910324097, -0.2964635193347931)), ((1.228216290473938, -11.92663288116455, -4.330328464508057), (0.4802894592285156, -0.8496643304824829, -0.21769800782203674)), ((0.8421406149864197, -12.141368865966797, -4.344974517822266), (0.4810654819011688, -0.8493232727050781, -0.2173147350549698)), ((0.46146687865257263, -12.358758926391602, -4.359249114990234), (0.4930044412612915, -0.8522552251815796, -0.1749504953622818)), ((0.07808034867048264, -12.572726249694824, -4.37190580368042), (0.4640282690525055, -0.872273862361908, -0.15432444214820862)), ((-0.3050210177898407, -12.774255752563477, -4.384742736816406), (0.4640282690525055, -0.872273862361908, -0.15432444214820862)), ((-0.700043797492981, -12.963458061218262, -4.376121520996094), (0.4238196313381195, -0.9043554663658142, -0.05018096789717674)), ((-1.1001874208450317, -13.133546829223633, -4.372778415679932), (0.3842787444591522, -0.923209547996521, -0.003732495242729783)), ((-1.5012882947921753, -13.284025192260742, -4.368843078613281), (0.3562570810317993, -0.9337148666381836, 0.03546077758073807)), ((-1.9106919765472412, -13.424680709838867, -4.369119167327881), (0.2934243679046631, -0.9545397162437439, 0.052499108016490936)), ((-2.3068270683288574, -13.543464660644531, -4.357743263244629), (0.28396278619766235, -0.9521703720092773, 0.11285656690597534)), ((-2.7034759521484375, -13.659074783325195, -4.363091945648193), (0.25537893176078796, -0.9605728387832642, 0.10991579294204712)), ((-3.099728584289551, -13.760115623474121, -4.366526126861572), (0.22026270627975464, -0.9680752158164978, 0.11964455246925354)), ((-3.494724750518799, -13.843435287475586, -4.349865436553955), (0.17997004091739655, -0.9671677947044373, 0.17943602800369263)), ((-3.9032013416290283, -13.90802001953125, -4.341413497924805), (0.10765490680932999, -0.9707468152046204, 0.21461841464042664)), ((-4.288050174713135, -13.955885887145996, -4.362342834472656), (0.0744924396276474, -0.977288007736206, 0.19839149713516235)), ((-4.64899206161499, -13.9833984375, -4.384270668029785), (0.062275223433971405, -0.9807520508766174, 0.18505969643592834)), ((-5.025768756866455, -13.982754707336426, -4.328967094421387), (0.012776619754731655, -0.9607120752334595, 0.27725279331207275)), ((-5.5845489501953125, -13.953145980834961, -4.413481712341309), (-0.2510153353214264, -0.9579694867134094, 0.138872429728508)), ((-6.056385040283203, -13.826213836669922, -4.501370429992676), (-0.35969066619873047, -0.9186540246009827, 0.1633932888507843)), ((-6.80537223815918, -13.305182456970215, -4.6904473304748535), (-0.733603835105896, -0.6794566512107849, 0.012806407175958157)), ((-7.217587471008301, -12.538728713989258, -4.944656848907471), (-0.9681234359741211, -0.22570641338825226, -0.10859905928373337)), ((-7.273878574371338, -12.163064002990723, -5.092933177947998), (-0.963613748550415, -0.17687223851680756, -0.20041140913963318)), ((-7.293020248413086, -11.63148307800293, -5.18087911605835), (-0.9668601751327515, 0.04305616021156311, -0.25164952874183655)), ((-7.252280235290527, -11.25894832611084, -5.270432472229004), (-0.9398751258850098, 0.09056255966424942, -0.32929202914237976)), ((-7.199690818786621, -10.890238761901855, -5.3028130531311035), (-0.9317785501480103, 0.12008935958147049, -0.34258902072906494)), ((-7.123985290527344, -10.520903587341309, -5.357718467712402), (-0.9014308452606201, 0.12667563557624817, -0.41397568583488464)), ((-7.046146869659424, -10.129901885986328, -5.383506774902344), (-0.8868086338043213, 0.1627543568611145, -0.4325292706489563)), ((-6.955165863037109, -9.744380950927734, -5.418332576751709), (-0.8475422263145447, 0.13924139738082886, -0.5121366381645203)), ((-6.861857891082764, -9.339191436767578, -5.434504985809326), (-0.8263511657714844, 0.18299567699432373, -0.5325939059257507)), ((-6.76259183883667, -8.931982040405273, -5.4452104568481445), (-0.7756098508834839, 0.14616191387176514, -0.6140570640563965)), ((-6.6765642166137695, -8.510696411132812, -5.462573051452637), (-0.76234370470047, 0.13235151767730713, -0.6334943771362305)), ((-6.609306812286377, -8.06385612487793, -5.487387657165527), (-0.722195029258728, 0.03312190622091293, -0.6908959746360779)), ((-6.566767692565918, -7.608061790466309, -5.526286602020264), (-0.6557433605194092, -0.03611818328499794, -0.754119336605072)), ((-6.534879684448242, -7.142571449279785, -5.592071533203125), (-0.6194258332252502, -0.11880027502775192, -0.7760143280029297)), ((-6.520045280456543, -6.6807379722595215, -5.688389778137207), (-0.592890739440918, -0.1845645308494568, -0.7838472723960876)), ((-6.51973295211792, -6.225375652313232, -5.810786724090576), (-0.5676591396331787, -0.2462630569934845, -0.7855684161186218)), ((-6.522418022155762, -5.783352375030518, -5.94798469543457), (-0.5722015500068665, -0.24049612879753113, -0.7840580344200134)), ((-6.526822566986084, -5.338564872741699, -6.088605880737305), (-0.5522850155830383, -0.25883954763412476, -0.7924540042877197)), ((-6.53071403503418, -4.895826816558838, -6.234813690185547), (-0.5606757998466492, -0.2629287540912628, -0.7851822972297668)), ((-6.531554222106934, -4.447047710418701, -6.381168365478516), (-0.5665624737739563, -0.21051929891109467, -0.7966734766960144)), ((-6.527181148529053, -4.004981517791748, -6.509786605834961), (-0.6046553254127502, -0.2461043745279312, -0.7575121521949768)), ((-6.514125347137451, -3.537018060684204, -6.635303497314453), (-0.6322054862976074, -0.14690585434436798, -0.7607461810112)), ((-6.488819122314453, -3.0789620876312256, -6.74044132232666), (-0.6635020971298218, -0.11670969426631927, -0.7390154600143433)), ((-6.451670169830322, -2.6169302463531494, -6.8474884033203125), (-0.6709107160568237, -0.06900174170732498, -0.7383208274841309)), ((-6.403146743774414, -2.1491901874542236, -6.929930210113525), (-0.6988092660903931, -0.006186168175190687, -0.7152812480926514)), ((-6.325911045074463, -1.6865484714508057, -6.986081600189209), (-0.7293506860733032, 0.04554114490747452, -0.6826225519180298)), ((-6.195399761199951, -1.1961435079574585, -7.050382137298584), (-0.6685109734535217, 0.18227103352546692, -0.7210203409194946)), ((-6.0880560874938965, -0.7641500234603882, -7.061517715454102), (-0.7183327078819275, 0.2018147110939026, -0.6657844185829163)), ((-5.9474334716796875, -0.3335265815258026, -7.080947399139404), (-0.7252273559570312, 0.24142307043075562, -0.6447947025299072)), ((-5.811456680297852, 0.07293888926506042, -7.068624019622803), (-0.7704164385795593, 0.26049113273620605, -0.5818960666656494)), ((-5.607356071472168, 0.5255075693130493, -7.04600191116333), (-0.7467051148414612, 0.3930196166038513, -0.5366256237030029)), ((-5.376159191131592, 0.9728009104728699, -7.001870155334473), (-0.7077823281288147, 0.529631495475769, -0.4674769937992096)), ((-5.153651237487793, 1.3470258712768555, -6.900442600250244), (-0.7327655553817749, 0.5896891355514526, -0.3395901322364807)), ((-4.890973091125488, 1.7409496307373047, -6.686811447143555), (-0.7147290706634521, 0.6958663463592529, -0.07023061811923981)), ((-4.562494277954102, 2.0654351711273193, -6.600245475769043), (-0.653716504573822, 0.7558290958404541, 0.03710942715406418)), ((-4.124000072479248, 2.374382495880127, -6.465231895446777), (-0.5008166432380676, 0.8550351858139038, 0.13452744483947754)), ((-3.5053389072418213, 2.592405319213867, -6.3381524085998535), (-0.13879691064357758, 0.9484548568725586, 0.28490138053894043)), ((-3.053670644760132, 2.6159329414367676, -6.348052501678467), (0.00047249573981389403, 0.9298126697540283, 0.36803293228149414)), ((-2.6886935234069824, 2.610679864883423, -6.3689069747924805), (0.04296139255166054, 0.9426755905151367, 0.3309335708618164)), ((-2.340008497238159, 2.5933899879455566, -6.3735480308532715), (0.00033371979952789843, 0.8784452676773071, 0.47784292697906494)), ((-1.985046148300171, 2.627131462097168, -6.401045799255371), (-0.14809012413024902, 0.8139658570289612, 0.561719536781311)), ((-1.6014492511749268, 2.6835641860961914, -6.435540199279785), (-0.01879526674747467, 0.8039489388465881, 0.5944011807441711)), ((-1.2507669925689697, 2.804719924926758, -6.57949686050415), (0.005645271390676498, 0.7870137095451355, 0.6169097423553467)), ((-0.8058944940567017, 3.0174033641815186, -6.727436542510986), (-0.13455691933631897, 0.6955627799034119, 0.7057526707649231)), ((-0.36757099628448486, 3.2639410495758057, -6.8410258293151855), (-0.23462612926959991, 0.6070687770843506, 0.7592219710350037)), ((0.09010534733533859, 3.604937791824341, -6.935788631439209), (-0.37146374583244324, 0.49949023127555847, 0.78263920545578)), ((0.50586998462677, 4.002291202545166, -6.9422478675842285), (-0.4469980001449585, 0.4389609694480896, 0.7794267535209656)), ((1.1745518445968628, 4.744974613189697, -6.674535274505615), (-0.8160139918327332, -0.007353958673775196, 0.5779852867126465)), ((1.3065500259399414, 5.482820987701416, -6.026688098907471), (-0.9184297323226929, -0.3932613730430603, 0.04280674457550049)), ((1.101792335510254, 5.904904365539551, -5.526758193969727), (-0.8467375040054321, -0.5198054313659668, -0.11330496519804001)), ((0.7277939915657043, 6.223092079162598, -5.049475193023682), (-0.6539521813392639, -0.6591471433639526, -0.37131062150001526)), ((0.31879833340644836, 6.515383720397949, -4.816664695739746), (-0.5778749585151672, -0.7175461053848267, -0.38882920145988464)), ((-0.08944789320230484, 6.78571891784668, -4.690540790557861), (-0.676880955696106, -0.5617249608039856, -0.4757070541381836)), ((-0.48404228687286377, 7.067477703094482, -4.555841445922852), (-0.626573383808136, -0.6599403619766235, -0.41458940505981445)), ((-0.8893394470214844, 7.309377193450928, -4.454758644104004), (-0.4974776804447174, -0.7107495069503784, -0.49734416604042053)), ((-1.2964023351669312, 7.529599189758301, -4.381041049957275), (-0.45416831970214844, -0.7065609097480774, -0.542681097984314)), ((-1.660889744758606, 7.712522983551025, -4.323578357696533), (-0.35447928309440613, -0.7502374649047852, -0.5581112504005432)), ((-2.0941002368927, 7.8726959228515625, -4.247971057891846), (-0.4213423728942871, -0.7564594149589539, -0.5002396106719971))]

origin_highest_vert = (-10.5040, 2.6564, 11.9506)
# 定时器 检测重拓扑操作是否完成   完成重拓扑操作后为重拓扑后的物体添加修改器控制其平滑度
class TimerAddModifierAfterQmesh(bpy.types.Operator):
    bl_idname = "object.timer_add_modifier_after_qmesh"
    bl_label = "在重拓扑完成后为重拓扑后的物体添加平滑修改器"

    __timer = None

    def execute(self, context):
        op_cls = TimerAddModifierAfterQmesh
        op_cls.__timer = context.window_manager.event_timer_add(
            0.1, window=context.window)
        global is_timer_modifier_start  # 防止添加多余的定时器
        is_timer_modifier_start = True
        context.window_manager.modal_handler_add(self)
        return {'RUNNING_MODAL'}

    def modal(self, context, event):
        op_cls = TimerAddModifierAfterQmesh
        global is_timer_modifier_start
        mould_type = bpy.context.scene.muJuTypeEnum
        lowest_z_co = bpy.context.scene.yingErMoLowestZCo
        cur_obj = bpy.data.objects["右耳"]
        cur_obj_name = cur_obj.name
        if context.area:
            context.area.tag_redraw()
        if(mould_type == "OP2"):                       #判断创建模具模块中选项是否为硬耳膜
        # if(True):
            if event.type == 'TIMER':
                obj = bpy.data.objects.get("Retopo_"+cur_obj.name)
                if(bpy.data.objects.get("Retopo_"+cur_obj.name) != None):               #判断重拓扑是否完成
                    cur_obj_qmesh = bpy.data.objects.get("Retopo_"+cur_obj.name)        #将原物体删除,将重拓扑后的物体名称改为原物体
                    bpy.data.objects.remove(cur_obj, do_unlink=True)
                    cur_obj_qmesh.name = cur_obj_name
                    moveToRight(cur_obj_qmesh)
                    bottom_smooth(lowest_z_co)                 #为重拓扑完成后的物体添加平滑修改器
                    bpy.ops.geometry.color_attribute_add(name="Color", color=(1, 0.319, 0.133, 1))
                    bpy.data.objects['右耳'].data.materials.clear()
                    bpy.data.objects['右耳'].data.materials.append(bpy.data.materials['Yellow'])
                    is_timer_modifier_start = False     #重拓扑完成且添加修改器后,退出该定时器
                    return {'FINISHED'}
            return {'PASS_THROUGH'}
        else:
            is_timer_modifier_start = False
            return {'FINISHED'}
        return {'PASS_THROUGH'}





#通过面板参数调整硬耳膜底面平滑度
def CreateMouldHardDrumSmooth(self,context):
    bl_description = "创建模具中的硬耳膜,平滑其底部边缘"

    obj = bpy.data.objects["右耳"]
    smooth = round(bpy.context.scene.yingErMoSheRuPianYi, 1)
    override = getOverride()
    with bpy.context.temp_override(**override):
        modifier_name = "HardEarDrumModifier"
        target_modifier = None
        for modifier in obj.modifiers:
            if modifier.name == modifier_name:  # TODO  优化：   将创建修改器放到加厚的invoke中，应用修改器放到提交中
                target_modifier = modifier
        if (target_modifier != None):
            bpy.context.object.modifiers["HardEarDrumModifier"].factor = 0.8
            bpy.context.object.modifiers["HardEarDrumModifier"].iterations = int(smooth * 10)

def bottom_fill():
    # 新方案
    obj = bpy.context.active_object
    bpy.ops.object.mode_set(mode='EDIT')
    bm = bmesh.from_edit_mesh(obj.data)
    # bpy.ops.mesh.remove_doubles(threshold=0.5)

    # 边界点和边界边
    border_verts = [v for v in bm.verts if v.select]
    border_verts_index = [v.index for v in border_verts]
    count = int(len(border_verts)/2)+2
    border_edges = [e for e in bm.edges if e.select]
    print('border_verts',len(border_verts))
    print('border_edges',len(border_edges))

    # 栅格填充方案
    bpy.ops.mesh.select_all(action='DESELECT')
    start_vert = min(border_verts, key=lambda v: v.co.y)
    start_vert.select = True
    end_vert = max(border_verts, key=lambda v: v.co.y)
    end_vert.select = True

    selected_verts = [v for v in bm.verts if v.select]

    print('补面前顶点数',len(selected_verts))

    count1 = 0
    for edge in start_vert.link_edges:
        for vert in edge.verts:
            if vert != start_vert and vert.index in border_verts_index and count1==0 and edge in border_edges:
                vert.select = True
                edge.select = True
                count1+=1
    count2 = 0
    for edge in end_vert.link_edges:
        for vert in edge.verts:
            if vert != start_vert and vert.index in border_verts_index and count2==0 and edge in border_edges:
                vert.select = True
                edge.select = True
                count2+=1
    selected_verts = [v for v in bm.verts if v.select]
    print('补面前顶点数2',len(selected_verts))
    bpy.ops.mesh.fill_grid()

    # # 选取起始点和相邻点
    # bpy.ops.mesh.select_all(action='DESELECT')
    # start_vert = min(border_verts, key=lambda v: v.co.y)
    # start_vert.select = True

    # for edge in start_vert.link_edges:
    #     for vert in edge.verts:
    #         if vert != start_vert and vert in border_verts:
    #             vert.select = True

    # # 先补一个面,再循环补面
    # bpy.ops.mesh.edge_face_add()
    # start_vert.select = False
    # while(count>0):
    #     bpy.ops.mesh.edge_face_add()
    #     count = count-1

    # 选取新增的边，并细分
    bpy.ops.mesh.select_all(action='DESELECT')
    bpy.ops.object.vertex_group_select()
    selected_edges2 = [v for v in bm.edges if v.select]
    new_edges = [e for e in selected_edges2 if e not in border_edges]
    print('edge2',len(selected_edges2))
    print('new edge',len(new_edges))

    bpy.ops.mesh.select_all(action='DESELECT')
    for e in new_edges:
        e.select = True

    old_num = len(bm.verts)

    bpy.ops.mesh.subdivide()
    bm = bmesh.from_edit_mesh(obj.data)
    selected_verts = [v for v in bm.verts if v.select]
    # 选取细分点，并移动
    mid_verts = [v for v in selected_verts if v.index >= old_num]
    print('mid_verts',len(mid_verts))

    bpy.ops.mesh.select_all(action='DESELECT')
    inner_verts = []
    for v in mid_verts:
        for edge in v.link_edges:
            for vert in edge.verts:
                if vert != v and vert.index < old_num:
                    if v not in inner_verts:
                        lens = edge.calc_length()
                        inner_verts.append(v)
                        dis = round(lens * 0.2,2)
                        v.co -= v.normal * dis
                        v.select = True
    print('inner',len(inner_verts))
    bmesh.update_edit_mesh(obj.data)

    bpy.ops.mesh.select_all(action='DESELECT')
    bpy.ops.object.vertex_group_select()
    selected_edges3 = [e for e in bm.edges if e.select]
    inner_edges = [e for e in selected_edges3 if e not in border_edges]
    print('inner_edges',len(inner_edges))

    old_num2 = len(bm.verts)
    # 选取内部边，再次细分
    bpy.ops.mesh.select_all(action='DESELECT')
    for e in inner_edges:
        e.select = True

    bpy.ops.mesh.subdivide()
    bm = bmesh.from_edit_mesh(obj.data)
    selected_verts2 = [v for v in bm.verts if v.select]
    side_verts = [v for v in selected_verts2 if v.index not in border_verts_index]
    print('selected_verts2',len(selected_verts))
    print('side_verts',len(side_verts))

    # 二次细分点
    verts = []
    for v in side_verts:
        for edge in v.link_edges:
            for vert in edge.verts:
                if vert != v and vert.index in border_verts_index:
                    if v not in verts:
                        verts.append(v)


    print('verts',len(verts))

    bpy.ops.mesh.select_all(action='DESELECT')

    inner_side_verts = []
    for v in verts:
        for edge in v.link_edges:
            for vert in edge.verts:
                if vert != v and vert.index in border_verts_index:
                    if v not in inner_side_verts:
                        lens = edge.calc_length()
                        inner_side_verts.append(v)
                        dis = round(lens * 0.1,2)
                        v.co -= v.normal * dis
                        v.select = True

    print('inner_side_verts',len(inner_side_verts))

    bmesh.update_edit_mesh(obj.data)
    bottom_outer_border_vertex = obj.vertex_groups.get("BottomOuterBorderVertex")
    bpy.ops.object.vertex_group_set_active(group='BottomOuterBorderVertex')
    if (bottom_outer_border_vertex != None):
        bpy.ops.object.vertex_group_select()
    # 融并底部所有面
    bpy.ops.mesh.select_mode(type='FACE')
    bpy.ops.mesh.dissolve_faces()
    # 调用offset cut插件
    # bpy.ops.mesh.select_mode(type='EDGE')
    # pianyi = bpy.context.scene.yingErMoSheRuPianYi
    # if pianyi != 0:
    #    bpy.ops.huier.offset_cut(width=pianyi, factor=0.5)
    #    bpy.ops.mesh.bevel(offset=pianyi * 0.8, segments=int(pianyi / 0.1))
    #    bpy.ops.mesh.select_more()
    #    bpy.ops.mesh.subdivide()
    bpy.ops.mesh.select_mode(type='VERT')
    bpy.ops.object.mode_set(mode='OBJECT')
    # 自动光滑
    obj.data.use_auto_smooth = True
    bpy.context.object.data.auto_smooth_angle = 0.349066



def bottom_smooth(lowest_z_co):
    #根据模型中顶点在z轴上的最低值,获取底面附近用于平滑的顶点。将顶点索引存储在该数组中
    hard_eardrum_smooth_vertex_index = []
    obj = bpy.data.objects["右耳"]
    me = obj.data
    bm = bmesh.new()
    bm.from_mesh(me)
    bm.verts.ensure_lookup_table()
    for vert in bm.verts:
        if ((vert.co[2] > lowest_z_co - 1.5) and (vert.co[2] < lowest_z_co + 1.5)):
            hard_eardrum_smooth_vertex_index.append(vert.index)

    # 根据获取的顶点索引数组创建顶点组
    bpy.ops.object.mode_set(mode='OBJECT')
    hard_eardrum_border_vertex = obj.vertex_groups.get("HardEarDrumBorderVertex")
    if (hard_eardrum_border_vertex == None):
        hard_eardrum_border_vertex = obj.vertex_groups.new(name="HardEarDrumBorderVertex")
    for vert_index in hard_eardrum_smooth_vertex_index:
        hard_eardrum_border_vertex.add([vert_index], 1, 'ADD')

    # bpy.ops.object.mode_set(mode='EDIT')
    # bpy.ops.mesh.select_all(action='DESELECT')
    # hard_eardrum_border_vertex = obj.vertex_groups.get("HardEarDrumBorderVertex")
    # bpy.ops.object.vertex_group_set_active(group='HardEarDrumBorderVertex')
    # if (hard_eardrum_border_vertex != None):
    #     bpy.ops.object.vertex_group_select()

    # 创建平滑修改器,指定硬耳膜平滑顶点组
    modifier_name = "HardEarDrumModifier"
    target_modifier = None
    for modifier in obj.modifiers:
        if modifier.name == modifier_name:  # TODO  优化：   将创建修改器放到加厚的invoke中，应用修改器放到提交中
            target_modifier = modifier
    if (target_modifier == None):
        bpy.ops.object.modifier_add(type='SMOOTH')
        bpy.context.object.modifiers["Smooth"].vertex_group = "HardEarDrumBorderVertex"
        hard_eardrum_modifier = bpy.context.object.modifiers["Smooth"]
        hard_eardrum_modifier.name = "HardEarDrumModifier"
    bpy.context.object.modifiers["HardEarDrumModifier"].factor = 0.8
    bpy.context.object.modifiers["HardEarDrumModifier"].iterations = 2


def hard_cut():
    # 硬耳膜底部切割
    high_percent = 0.25
    lowest_z_co = get_plane_height(high_percent)
    bpy.context.scene.yingErMoLowestZCo = lowest_z_co
    global origin_highest_vert
    global border_vert_co_and_normal
    hard_normal_projection_to_darw_cut_plane(origin_highest_vert, border_vert_co_and_normal)
    utils_plane_cut()
    cur_obj = bpy.data.objects["右耳"]
    bpy.ops.object.mode_set(mode='EDIT')  # 选中切割后的循环边
    bottom_outer_border_vertex = cur_obj.vertex_groups.get("BottomOuterBorderVertex")
    if (bottom_outer_border_vertex != None):
       bpy.ops.object.vertex_group_set_active(group='BottomOuterBorderVertex')
    bpy.ops.object.vertex_group_select()
    # bpy.ops.object.mode_set(mode='EDIT')
    # bm = bmesh.from_edit_mesh(cur_obj.data)
    # bpy.ops.mesh.select_all(action='DESELECT')
    # outer_border_vertex = cur_obj.vertex_groups.get("BottomOuterBorderVertex")
    # bpy.ops.object.vertex_group_set_active(group="BottomOuterBorderVertex")
    # if (outer_border_vertex != None):
    #     bpy.ops.object.vertex_group_select()
    #     bpy.ops.mesh.remove_doubles(threshold=0.2)
    #     outer_border = [v for v in bm.verts if v.select]
    #     outer_edges = set()
    #     extrude_direction = {}
    #     # 遍历选中的顶点
    #     for vert in outer_border:
    #         key = (vert.co[0], vert.co[1], vert.co[2])
    #         extrude_direction[key] = vert.normal
    #         for edge in vert.link_edges:
    #             # 检查边的两个顶点是否都在选中的顶点中
    #             if edge.verts[0] in outer_border and edge.verts[1] in outer_border:
    #                 outer_edges.add(edge)
    #                 edge.select_set(True)

    #     # 复制选中的顶点并沿着各自的法线方向移动
    #     bpy.ops.mesh.duplicate()

    #     # 获取所有选中的顶点
    #     inside_border_vert = [v for v in bm.verts if v.select]
    #     inside_border_index = [v.index for v in bm.verts if v.select]

    #     inside_edges = [e for e in bm.edges if e.select]

    #     for i, vert in enumerate(inside_border_vert):
    #         key = (vert.co[0], vert.co[1], vert.co[2])
    #         dir = extrude_direction[key]
    #         vert.co -= dir * 2  # 沿法线方向移动

    #     # 重新选中外边界
    #     for v in outer_border:
    #         v.select_set(True)

    #     for edge in outer_edges:
    #         edge.select_set(True)

    #     bpy.ops.mesh.bridge_edge_loops()

    #     bpy.ops.object.mode_set(mode='OBJECT')
    #     set_vert_group("BottomInnerBorderVertex", inside_border_index)
        
    #     bpy.ops.object.mode_set(mode='EDIT')
    #     bpy.ops.mesh.select_all(action='DESELECT')
    #     inner_border_vertex = cur_obj.vertex_groups.get("BottomInnerBorderVertex")
    #     bpy.ops.object.vertex_group_set_active(group="BottomInnerBorderVertex")
    #     if (inner_border_vertex != None):
    #         bpy.ops.object.vertex_group_select()
    #     bpy.ops.object.vertex_group_set_active(group="BottomOuterBorderVertex")
    #     bpy.ops.object.vertex_group_remove_from()
    #     bpy.ops.object.mode_set(mode='OBJECT')


def hard_fill():
    obj = bpy.data.objects["右耳"]
    # 局部重拓扑
    # if not bpy.data.objects.get("RetopoPlane"):
    #     bpy.data.objects["CutPlane"].name = "RetopoPlane"
    #     retopo(obj.name,"BottomOuterBorderVertex",0.5)

    bottom_fill()  # 底面切割后补面并且重拓扑
    # convert_to_mesh('BottomRingBorderR', 'meshBottomRingBorderR', 0.18)
    pass  # TODO 将模型由透明变为非透明
    # bpy.data.objects.remove(duplicate_obj, do_unlink=True)
    # # 解决重拓扑的异步问题   添加平滑修改器,指定硬耳膜平滑顶点组,且可通过面板参数调整平滑度
    # # bottom_smooth(-5.2)
    # bpy.ops.object.timer_add_modifier_after_qmesh()
    # bpy.ops.object.mode_set(mode='OBJECT')

    # 复制一份用于边缘平滑
    # obj = bpy.data.objects['右耳']
    # duplicate_obj = obj.copy()
    # duplicate_obj.data = obj.data.copy()
    # if bpy.data.objects.get(obj.name + 'ForSmooth') != None:
    #    bpy.data.objects.remove(bpy.data.objects[obj.name + 'ForSmooth'], do_unlink=True)
    # duplicate_obj.name = obj.name + "ForSmooth"
    # duplicate_obj.animation_data_clear()
    # bpy.context.scene.collection.objects.link(duplicate_obj)
    # moveToRight(duplicate_obj)
    # duplicate_obj.hide_set(True)


def apply_hard_eardrum_template():
    # 硬耳膜底部切割
    high_percent = 0.25
    lowest_z_co = get_plane_height(high_percent)
    bpy.context.scene.yingErMoLowestZCo = lowest_z_co
    global origin_highest_vert
    global border_vert_co_and_normal
    hard_normal_projection_to_darw_cut_plane(origin_highest_vert,border_vert_co_and_normal)
    utils_plane_cut()
    bpy.ops.object.mode_set(mode='EDIT')   #选中切割后的循环边
    cur_obj = bpy.data.objects["右耳"]
    bottom_outer_border_vertex = cur_obj.vertex_groups.get("BottomOuterBorderVertex")
    if(bottom_outer_border_vertex != None):
        bpy.ops.object.vertex_group_set_active(group='BottomOuterBorderVertex')
    bpy.ops.object.vertex_group_select()
    bpy.ops.object.mode_set(mode='OBJECT')
    # 底部切割后补面                         #TODO      补面过程有顿挫感,先复制出一份模型作为对比,在将当前模型透明过隐藏补面过程,补面完成后再将该模型实体化并删除复制的模型
    # active_obj = bpy.context.active_object
    # duplicate_obj = active_obj.copy()
    # duplicate_obj.data = active_obj.data.copy()
    # duplicate_obj.name = "HardDrumFillCompare"
    # duplicate_obj.animation_data_clear()
    # bpy.context.scene.collection.objects.link(duplicate_obj)
    # duplicate_obj.select_set(state=False)
    pass  # TODO 将当前模型变透明
    bottom_fill()                                      #底面切割后补面并且重拓扑
    convert_to_mesh('BottomRingBorderR', 'meshBottomRingBorderR', 0.18)
    pass  # TODO 将模型由透明变为非透明
    # bpy.data.objects.remove(duplicate_obj, do_unlink=True)
    # # 解决重拓扑的异步问题   添加平滑修改器,指定硬耳膜平滑顶点组,且可通过面板参数调整平滑度
    # # bottom_smooth(-5.2)
    bpy.ops.object.timer_add_modifier_after_qmesh()
    bpy.ops.object.mode_set(mode='OBJECT')

def hard_clear_co_and_normal():
    global border_vert_co_and_normal
    border_vert_co_and_normal = []


def hard_set_co_and_normal(co, normal):
    global border_vert_co_and_normal
    border_vert_co_and_normal.append((co, normal))

def hard_set_highest_vert():
    global origin_highest_vert
    origin_highest_vert = get_highest_vert("右耳OriginForFitPlace")





_classes = [
    TimerAddModifierAfterQmesh
]


def register():
    for cls in _classes:
        bpy.utils.register_class(cls)


def unregister():
    for cls in _classes:
        bpy.utils.unregister_class(cls)