from ..bottom_ring import get_plane_height
from ..normal_projection import hard_normal_projection_to_darw_cut_plane, get_highest_vert
from ...tool import getOverride, convert_to_mesh, set_vert_group, moveToRight, moveToLeft, change_mat_mould, getOverride2
from ...utils.utils import utils_plane_cut
import bpy
import bmesh

border_vert_co_and_normal = [((-2.4524667263031006, 8.037524223327637, -4.202472686767578), (-0.40262970328330994, -0.7630082368850708, -0.5056755542755127)), ((-3.189103603363037, 8.406002044677734, -3.7534568309783936), (-0.7612749338150024, -0.624113917350769, -0.17590464651584625)), ((-3.6119959354400635, 9.053285598754883, -3.207775592803955), (-0.9149531126022339, -0.3793942630290985, 0.13755251467227936)), ((-3.6906697750091553, 9.656052589416504, -2.775235176086426), (-0.9004908800125122, -0.2214166671037674, 0.37428703904151917)), ((-3.6796090602874756, 10.290327072143555, -2.5441911220550537), (-0.8772240877151489, -0.019902322441339493, 0.479668527841568)), ((-3.546583890914917, 10.844295501708984, -2.3826589584350586), (-0.8177085518836975, 0.1776888519525528, 0.5475211143493652)), ((-3.4228498935699463, 11.266737937927246, -2.331822156906128), (-0.766563355922699, 0.21715693175792694, 0.6043373346328735)), ((-3.2690887451171875, 11.664029121398926, -2.3080697059631348), (-0.7097743153572083, 0.3109472095966339, 0.6320856213569641)), ((-3.123157024383545, 12.006698608398438, -2.3127739429473877), (-0.7132496237754822, 0.3100937306880951, 0.6285832524299622)), ((-2.7992279529571533, 12.541913986206055, -2.3371548652648926), (-0.5576633810997009, 0.4815751910209656, 0.676089346408844)), ((-2.4199490547180176, 13.029330253601074, -2.4286398887634277), (-0.41061899065971375, 0.6076001524925232, 0.6798633337020874)), ((-2.0182905197143555, 13.532931327819824, -2.6718862056732178), (-0.3275633454322815, 0.6646520495414734, 0.6715205907821655)), ((-1.5957549810409546, 13.994171142578125, -2.9579310417175293), (-0.2821500599384308, 0.7272164821624756, 0.6257375478744507)), ((-1.319612979888916, 14.153730392456055, -3.0387580394744873), (-0.24434557557106018, 0.74019855260849, 0.6264194250106812)), ((-1.0422860383987427, 14.309700012207031, -3.1226229667663574), (-0.1960579752922058, 0.7409763336181641, 0.6422736048698425)), ((-0.5696468353271484, 14.518099784851074, -3.2815561294555664), (-0.12656842172145844, 0.8064904808998108, 0.577540934085846)), ((-0.09424900263547897, 14.70892333984375, -3.4530770778656006), (-0.11766470223665237, 0.8136171102523804, 0.5693699717521667)), ((0.4188186824321747, 14.838747024536133, -3.6189489364624023), (-0.022871574386954308, 0.8889359831809998, 0.45746010541915894)), ((0.9325219988822937, 14.943866729736328, -3.7975339889526367), (0.03313567861914635, 0.9225844740867615, 0.384369432926178)), ((1.4373786449432373, 15.016488075256348, -4.020472049713135), (0.043403420597314835, 0.9168171882629395, 0.39694151282310486)), ((1.9400919675827026, 15.043839454650879, -4.2630109786987305), (0.1915607452392578, 0.9424740076065063, 0.27394741773605347)), ((2.404057741165161, 14.982595443725586, -4.390927314758301), (0.24961648881435394, 0.9529363512992859, 0.1720576137304306)), ((2.8634138107299805, 14.88355827331543, -4.55575704574585), (0.27858439087867737, 0.960387110710144, 0.006880823988467455)), ((3.3144404888153076, 14.748059272766113, -4.70359992980957), (0.29775384068489075, 0.9545696377754211, -0.01180911436676979)), ((3.753746747970581, 14.591874122619629, -4.916004657745361), (0.28044864535331726, 0.9210543036460876, -0.2701992988586426)), ((4.183808326721191, 14.39433765411377, -5.077510356903076), (0.2749275267124176, 0.8923407196998596, -0.357970267534256)), ((4.61724853515625, 14.174215316772461, -5.2284722328186035), (0.29784297943115234, 0.8475522398948669, -0.4392549991607666)), ((5.043235778808594, 13.946385383605957, -5.360770225524902), (0.30589306354522705, 0.8201949000358582, -0.4834352135658264)), ((5.466044902801514, 13.69710636138916, -5.488178730010986), (0.31895193457603455, 0.7720614671707153, -0.5497187376022339)), ((5.881783485412598, 13.437621116638184, -5.605529308319092), (0.3162960708141327, 0.7247315645217896, -0.6121445894241333)), ((6.30906867980957, 13.169400215148926, -5.690971851348877), (0.3793207108974457, 0.7021373510360718, -0.6025934815406799)), ((6.712873935699463, 12.892032623291016, -5.7640790939331055), (0.3761657476425171, 0.7083095908164978, -0.5973246097564697)), ((7.125036716461182, 12.604413986206055, -5.828924655914307), (0.41834235191345215, 0.6992841958999634, -0.5796475410461426)), ((7.528140544891357, 12.299099922180176, -5.880481243133545), (0.4636756479740143, 0.6829373836517334, -0.5644478797912598)), ((7.922765254974365, 11.987273216247559, -5.927358627319336), (0.488547146320343, 0.668317437171936, -0.5609574913978577)), ((8.313337326049805, 11.669456481933594, -5.965511798858643), (0.5200785994529724, 0.659409761428833, -0.5428601503372192)), ((8.693058013916016, 11.339168548583984, -5.993213653564453), (0.5514662861824036, 0.6497480273246765, -0.5231752991676331)), ((9.069087982177734, 11.008218765258789, -6.019508361816406), (0.5569279193878174, 0.6759569644927979, -0.4826110005378723)), ((9.449124336242676, 10.679544448852539, -6.051191329956055), (0.5690030455589294, 0.6953057050704956, -0.4390735924243927)), ((9.830979347229004, 10.35207748413086, -6.086946487426758), (0.5808348059654236, 0.7175060510635376, -0.3844683766365051)), ((10.219486236572266, 10.02961540222168, -6.127377033233643), (0.5589351654052734, 0.7528654932975769, -0.3475414216518402)), ((10.618195533752441, 9.720091819763184, -6.174502372741699), (0.5218167304992676, 0.7937194108963013, -0.3125969469547272)), ((11.024223327636719, 9.428936004638672, -6.227072238922119), (0.527946949005127, 0.792110025882721, -0.30632326006889343)), ((11.432989120483398, 9.145708084106445, -6.281611442565918), (0.5184890031814575, 0.817013680934906, -0.25230517983436584)), ((11.842052459716797, 8.870647430419922, -6.338931560516357), (0.5070933699607849, 0.8245838284492493, -0.25083401799201965)), ((12.251548767089844, 8.595674514770508, -6.394364356994629), (0.5274760127067566, 0.8185788989067078, -0.227370947599411)), ((12.659550666809082, 8.319034576416016, -6.438678741455078), (0.5541664361953735, 0.8148720860481262, -0.1699496954679489)), ((13.055801391601562, 8.036456108093262, -6.494851589202881), (0.5614855885505676, 0.8084651827812195, -0.17640283703804016)), ((13.456512451171875, 7.718694686889648, -6.546116828918457), (0.6229527592658997, 0.7621706128120422, -0.17614123225212097)), ((13.834610939025879, 7.3873796463012695, -6.594435691833496), (0.6590945720672607, 0.7311948537826538, -0.17592132091522217)), ((14.212748527526855, 6.990335941314697, -6.628629207611084), (0.7469183206558228, 0.644424557685852, -0.1637982726097107)), ((14.534690856933594, 6.537845611572266, -6.672299385070801), (0.8177701830863953, 0.5444501638412476, -0.1866171509027481)), ((14.796432495117188, 6.1121506690979, -6.713450908660889), (0.8302778005599976, 0.5157380104064941, -0.21131274104118347)), ((15.042763710021973, 5.599650859832764, -6.778243541717529), (0.877798855304718, 0.38678333163261414, -0.28260883688926697)), ((15.209301948547363, 5.098394870758057, -6.819424152374268), (0.8877565860748291, 0.31122228503227234, -0.3391592502593994)), ((15.334659576416016, 4.537053108215332, -6.847128868103027), (0.904056191444397, 0.15885914862155914, -0.39679476618766785)), ((15.405922889709473, 4.001555442810059, -6.8283305168151855), (0.9120907187461853, 0.050866346806287766, -0.406820684671402)), ((15.432717323303223, 3.4911866188049316, -6.792169094085693), (0.9130026698112488, -0.018438950181007385, -0.40753650665283203)), ((15.4196195602417, 2.958087682723999, -6.742530345916748), (0.9044775366783142, -0.1470412313938141, -0.4003739058971405)), ((15.361771583557129, 2.4713361263275146, -6.698443412780762), (0.8774141669273376, -0.203329399228096, -0.43451303243637085)), ((15.281874656677246, 1.9992473125457764, -6.629258155822754), (0.8670740723609924, -0.2461121678352356, -0.43314114212989807)), ((15.18979549407959, 1.5429607629776, -6.565275192260742), (0.8565238118171692, -0.24323183298110962, -0.4551980793476105)), ((15.095983505249023, 1.0852535963058472, -6.501328468322754), (0.8534993529319763, -0.2309599369764328, -0.4671149253845215)), ((15.003473281860352, 0.6225656867027283, -6.442293643951416), (0.8537630438804626, -0.22829604148864746, -0.4679417908191681)), ((14.911738395690918, 0.1591285765171051, -6.390437602996826), (0.8568154573440552, -0.2161545306444168, -0.46812885999679565)), ((14.822955131530762, -0.3052515387535095, -6.348653316497803), (0.8549977540969849, -0.1967860460281372, -0.4798479676246643)), ((14.724830627441406, -0.7711293697357178, -6.310545921325684), (0.8404646515846252, -0.20923016965389252, -0.4998418092727661)), ((14.615044593811035, -1.234965205192566, -6.268581867218018), (0.8403260707855225, -0.23334109783172607, -0.48928922414779663)), ((14.50101089477539, -1.6964809894561768, -6.241866111755371), (0.809341549873352, -0.2387261539697647, -0.5366339087486267)), ((14.377081871032715, -2.158167600631714, -6.2090349197387695), (0.8011540770530701, -0.2692999243736267, -0.5344432592391968)), ((14.230493545532227, -2.610866069793701, -6.175926208496094), (0.778516948223114, -0.2836454212665558, -0.559872031211853)), ((14.077872276306152, -3.0630295276641846, -6.14232063293457), (0.7670406103134155, -0.3100009262561798, -0.5617367029190063)), ((13.90507984161377, -3.511035680770874, -6.105591297149658), (0.7454671859741211, -0.348965048789978, -0.5678925514221191)), ((13.731925964355469, -3.9434752464294434, -6.083834171295166), (0.7319133281707764, -0.3223840594291687, -0.600309431552887)), ((13.519024848937988, -4.401065349578857, -6.040715217590332), (0.6726561188697815, -0.44404685497283936, -0.591908872127533)), ((13.283761024475098, -4.796473979949951, -6.042201995849609), (0.7055508494377136, -0.3983989655971527, -0.5860685706138611)), ((13.039084434509277, -5.192239761352539, -6.044153213500977), (0.6777418851852417, -0.41942542791366577, -0.6039440035820007)), ((12.778265953063965, -5.58751916885376, -6.037346363067627), (0.6482749581336975, -0.45807525515556335, -0.608199417591095)), ((12.49316120147705, -5.9733147621154785, -6.030880928039551), (0.5971798896789551, -0.4851335883140564, -0.6387657523155212)), ((12.16090202331543, -6.367173671722412, -5.98195743560791), (0.5113323330879211, -0.5965235829353333, -0.6186265349388123)), ((11.78557300567627, -6.717959403991699, -5.872579574584961), (0.41974347829818726, -0.7229637503623962, -0.548761248588562)), ((11.406169891357422, -7.004942893981934, -5.762633800506592), (0.35604122281074524, -0.775499701499939, -0.5213778018951416)), ((11.032096862792969, -7.256348133087158, -5.64180850982666), (0.346480131149292, -0.8074256181716919, -0.4775095582008362)), ((10.648161888122559, -7.485165596008301, -5.544238090515137), (0.30335208773612976, -0.7653834819793701, -0.5675963759422302)), ((10.272462844848633, -7.716685771942139, -5.433914661407471), (0.37608417868614197, -0.7239571809768677, -0.5783136487007141)), ((9.89417839050293, -7.969853401184082, -5.348110198974609), (0.3459359407424927, -0.6714597344398499, -0.6553396582603455)), ((9.526912689208984, -8.23912239074707, -5.285478115081787), (0.3917737603187561, -0.6147778630256653, -0.6845154762268066)), ((9.16407585144043, -8.52333927154541, -5.243536472320557), (0.38707804679870605, -0.6389933228492737, -0.6647241711616516)), ((8.77260971069336, -8.791947364807129, -5.197661399841309), (0.2687610983848572, -0.6746200919151306, -0.6874994039535522)), ((8.39773178100586, -9.02065372467041, -5.136980056762695), (0.3308183252811432, -0.5833517909049988, -0.7417948842048645)), ((7.997342586517334, -9.276155471801758, -5.105701446533203), (0.2794642746448517, -0.6361315250396729, -0.7191914319992065)), ((7.570889472961426, -9.503772735595703, -5.034520149230957), (0.172379270195961, -0.7445701956748962, -0.6449036002159119)), ((7.1465229988098145, -9.698946952819824, -4.943505764007568), (0.13414502143859863, -0.7482703924179077, -0.6496894955635071)), ((6.71651029586792, -9.85540771484375, -4.846092700958252), (0.08593921363353729, -0.7579213380813599, -0.6466603875160217)), ((6.2899017333984375, -9.991789817810059, -4.740972518920898), (0.06900126487016678, -0.7707306146621704, -0.6334139704704285)), ((5.862523078918457, -10.111231803894043, -4.633066654205322), (0.07059364020824432, -0.7947496771812439, -0.6028180122375488)), ((5.432253360748291, -10.217447280883789, -4.528927326202393), (0.07499397546052933, -0.7916622161865234, -0.6063389182090759)), ((5.001654624938965, -10.324350357055664, -4.435705184936523), (0.06972449272871017, -0.8031533360481262, -0.591678261756897)), ((4.562598705291748, -10.445086479187012, -4.365834712982178), (0.1304398477077484, -0.8173840045928955, -0.5611316561698914)), ((4.120433807373047, -10.563133239746094, -4.311770439147949), (0.1805325746536255, -0.8433975577354431, -0.5060520172119141)), ((3.6704208850860596, -10.704132080078125, -4.268163681030273), (0.26471152901649475, -0.8291848301887512, -0.49232128262519836)), ((3.221687078475952, -10.884085655212402, -4.2630109786987305), (0.39260679483413696, -0.8103886842727661, -0.43489107489585876)), ((2.810871124267578, -11.076805114746094, -4.273527145385742), (0.4120768904685974, -0.8320635557174683, -0.3712989389896393)), ((2.404498815536499, -11.281939506530762, -4.27736234664917), (0.436750203371048, -0.8204596638679504, -0.3689108192920685)), ((2.0022199153900146, -11.489653587341309, -4.298217296600342), (0.48073410987854004, -0.8303649425506592, -0.2817603349685669)), ((1.6150870323181152, -11.706648826599121, -4.310435771942139), (0.45886313915252686, -0.8375881910324097, -0.2964635193347931)), ((1.228216290473938, -11.92663288116455, -4.330328464508057), (0.4802894592285156, -0.8496643304824829, -0.21769800782203674)), ((0.8421406149864197, -12.141368865966797, -4.344974517822266), (0.4810654819011688, -0.8493232727050781, -0.2173147350549698)), ((0.46146687865257263, -12.358758926391602, -4.359249114990234), (0.4930044412612915, -0.8522552251815796, -0.1749504953622818)), ((0.07808034867048264, -12.572726249694824, -4.37190580368042), (0.4640282690525055, -0.872273862361908, -0.15432444214820862)), ((-0.3050210177898407, -12.774255752563477, -4.384742736816406), (0.4640282690525055, -0.872273862361908, -0.15432444214820862)), ((-0.700043797492981, -12.963458061218262, -4.376121520996094), (0.4238196313381195, -0.9043554663658142, -0.05018096789717674)), ((-1.1001874208450317, -13.133546829223633, -4.372778415679932), (0.3842787444591522, -0.923209547996521, -0.003732495242729783)), ((-1.5012882947921753, -13.284025192260742, -4.368843078613281), (0.3562570810317993, -0.9337148666381836, 0.03546077758073807)), ((-1.9106919765472412, -13.424680709838867, -4.369119167327881), (0.2934243679046631, -0.9545397162437439, 0.052499108016490936)), ((-2.3068270683288574, -13.543464660644531, -4.357743263244629), (0.28396278619766235, -0.9521703720092773, 0.11285656690597534)), ((-2.7034759521484375, -13.659074783325195, -4.363091945648193), (0.25537893176078796, -0.9605728387832642, 0.10991579294204712)), ((-3.099728584289551, -13.760115623474121, -4.366526126861572), (0.22026270627975464, -0.9680752158164978, 0.11964455246925354)), ((-3.494724750518799, -13.843435287475586, -4.349865436553955), (0.17997004091739655, -0.9671677947044373, 0.17943602800369263)), ((-3.9032013416290283, -13.90802001953125, -4.341413497924805), (0.10765490680932999, -0.9707468152046204, 0.21461841464042664)), ((-4.288050174713135, -13.955885887145996, -4.362342834472656), (0.0744924396276474, -0.977288007736206, 0.19839149713516235)), ((-4.64899206161499, -13.9833984375, -4.384270668029785), (0.062275223433971405, -0.9807520508766174, 0.18505969643592834)), ((-5.025768756866455, -13.982754707336426, -4.328967094421387), (0.012776619754731655, -0.9607120752334595, 0.27725279331207275)), ((-5.5845489501953125, -13.953145980834961, -4.413481712341309), (-0.2510153353214264, -0.9579694867134094, 0.138872429728508)), ((-6.056385040283203, -13.826213836669922, -4.501370429992676), (-0.35969066619873047, -0.9186540246009827, 0.1633932888507843)), ((-6.80537223815918, -13.305182456970215, -4.6904473304748535), (-0.733603835105896, -0.6794566512107849, 0.012806407175958157)), ((-7.217587471008301, -12.538728713989258, -4.944656848907471), (-0.9681234359741211, -0.22570641338825226, -0.10859905928373337)), ((-7.273878574371338, -12.163064002990723, -5.092933177947998), (-0.963613748550415, -0.17687223851680756, -0.20041140913963318)), ((-7.293020248413086, -11.63148307800293, -5.18087911605835), (-0.9668601751327515, 0.04305616021156311, -0.25164952874183655)), ((-7.252280235290527, -11.25894832611084, -5.270432472229004), (-0.9398751258850098, 0.09056255966424942, -0.32929202914237976)), ((-7.199690818786621, -10.890238761901855, -5.3028130531311035), (-0.9317785501480103, 0.12008935958147049, -0.34258902072906494)), ((-7.123985290527344, -10.520903587341309, -5.357718467712402), (-0.9014308452606201, 0.12667563557624817, -0.41397568583488464)), ((-7.046146869659424, -10.129901885986328, -5.383506774902344), (-0.8868086338043213, 0.1627543568611145, -0.4325292706489563)), ((-6.955165863037109, -9.744380950927734, -5.418332576751709), (-0.8475422263145447, 0.13924139738082886, -0.5121366381645203)), ((-6.861857891082764, -9.339191436767578, -5.434504985809326), (-0.8263511657714844, 0.18299567699432373, -0.5325939059257507)), ((-6.76259183883667, -8.931982040405273, -5.4452104568481445), (-0.7756098508834839, 0.14616191387176514, -0.6140570640563965)), ((-6.6765642166137695, -8.510696411132812, -5.462573051452637), (-0.76234370470047, 0.13235151767730713, -0.6334943771362305)), ((-6.609306812286377, -8.06385612487793, -5.487387657165527), (-0.722195029258728, 0.03312190622091293, -0.6908959746360779)), ((-6.566767692565918, -7.608061790466309, -5.526286602020264), (-0.6557433605194092, -0.03611818328499794, -0.754119336605072)), ((-6.534879684448242, -7.142571449279785, -5.592071533203125), (-0.6194258332252502, -0.11880027502775192, -0.7760143280029297)), ((-6.520045280456543, -6.6807379722595215, -5.688389778137207), (-0.592890739440918, -0.1845645308494568, -0.7838472723960876)), ((-6.51973295211792, -6.225375652313232, -5.810786724090576), (-0.5676591396331787, -0.2462630569934845, -0.7855684161186218)), ((-6.522418022155762, -5.783352375030518, -5.94798469543457), (-0.5722015500068665, -0.24049612879753113, -0.7840580344200134)), ((-6.526822566986084, -5.338564872741699, -6.088605880737305), (-0.5522850155830383, -0.25883954763412476, -0.7924540042877197)), ((-6.53071403503418, -4.895826816558838, -6.234813690185547), (-0.5606757998466492, -0.2629287540912628, -0.7851822972297668)), ((-6.531554222106934, -4.447047710418701, -6.381168365478516), (-0.5665624737739563, -0.21051929891109467, -0.7966734766960144)), ((-6.527181148529053, -4.004981517791748, -6.509786605834961), (-0.6046553254127502, -0.2461043745279312, -0.7575121521949768)), ((-6.514125347137451, -3.537018060684204, -6.635303497314453), (-0.6322054862976074, -0.14690585434436798, -0.7607461810112)), ((-6.488819122314453, -3.0789620876312256, -6.74044132232666), (-0.6635020971298218, -0.11670969426631927, -0.7390154600143433)), ((-6.451670169830322, -2.6169302463531494, -6.8474884033203125), (-0.6709107160568237, -0.06900174170732498, -0.7383208274841309)), ((-6.403146743774414, -2.1491901874542236, -6.929930210113525), (-0.6988092660903931, -0.006186168175190687, -0.7152812480926514)), ((-6.325911045074463, -1.6865484714508057, -6.986081600189209), (-0.7293506860733032, 0.04554114490747452, -0.6826225519180298)), ((-6.195399761199951, -1.1961435079574585, -7.050382137298584), (-0.6685109734535217, 0.18227103352546692, -0.7210203409194946)), ((-6.0880560874938965, -0.7641500234603882, -7.061517715454102), (-0.7183327078819275, 0.2018147110939026, -0.6657844185829163)), ((-5.9474334716796875, -0.3335265815258026, -7.080947399139404), (-0.7252273559570312, 0.24142307043075562, -0.6447947025299072)), ((-5.811456680297852, 0.07293888926506042, -7.068624019622803), (-0.7704164385795593, 0.26049113273620605, -0.5818960666656494)), ((-5.607356071472168, 0.5255075693130493, -7.04600191116333), (-0.7467051148414612, 0.3930196166038513, -0.5366256237030029)), ((-5.376159191131592, 0.9728009104728699, -7.001870155334473), (-0.7077823281288147, 0.529631495475769, -0.4674769937992096)), ((-5.153651237487793, 1.3470258712768555, -6.900442600250244), (-0.7327655553817749, 0.5896891355514526, -0.3395901322364807)), ((-4.890973091125488, 1.7409496307373047, -6.686811447143555), (-0.7147290706634521, 0.6958663463592529, -0.07023061811923981)), ((-4.562494277954102, 2.0654351711273193, -6.600245475769043), (-0.653716504573822, 0.7558290958404541, 0.03710942715406418)), ((-4.124000072479248, 2.374382495880127, -6.465231895446777), (-0.5008166432380676, 0.8550351858139038, 0.13452744483947754)), ((-3.5053389072418213, 2.592405319213867, -6.3381524085998535), (-0.13879691064357758, 0.9484548568725586, 0.28490138053894043)), ((-3.053670644760132, 2.6159329414367676, -6.348052501678467), (0.00047249573981389403, 0.9298126697540283, 0.36803293228149414)), ((-2.6886935234069824, 2.610679864883423, -6.3689069747924805), (0.04296139255166054, 0.9426755905151367, 0.3309335708618164)), ((-2.340008497238159, 2.5933899879455566, -6.3735480308532715), (0.00033371979952789843, 0.8784452676773071, 0.47784292697906494)), ((-1.985046148300171, 2.627131462097168, -6.401045799255371), (-0.14809012413024902, 0.8139658570289612, 0.561719536781311)), ((-1.6014492511749268, 2.6835641860961914, -6.435540199279785), (-0.01879526674747467, 0.8039489388465881, 0.5944011807441711)), ((-1.2507669925689697, 2.804719924926758, -6.57949686050415), (0.005645271390676498, 0.7870137095451355, 0.6169097423553467)), ((-0.8058944940567017, 3.0174033641815186, -6.727436542510986), (-0.13455691933631897, 0.6955627799034119, 0.7057526707649231)), ((-0.36757099628448486, 3.2639410495758057, -6.8410258293151855), (-0.23462612926959991, 0.6070687770843506, 0.7592219710350037)), ((0.09010534733533859, 3.604937791824341, -6.935788631439209), (-0.37146374583244324, 0.49949023127555847, 0.78263920545578)), ((0.50586998462677, 4.002291202545166, -6.9422478675842285), (-0.4469980001449585, 0.4389609694480896, 0.7794267535209656)), ((1.1745518445968628, 4.744974613189697, -6.674535274505615), (-0.8160139918327332, -0.007353958673775196, 0.5779852867126465)), ((1.3065500259399414, 5.482820987701416, -6.026688098907471), (-0.9184297323226929, -0.3932613730430603, 0.04280674457550049)), ((1.101792335510254, 5.904904365539551, -5.526758193969727), (-0.8467375040054321, -0.5198054313659668, -0.11330496519804001)), ((0.7277939915657043, 6.223092079162598, -5.049475193023682), (-0.6539521813392639, -0.6591471433639526, -0.37131062150001526)), ((0.31879833340644836, 6.515383720397949, -4.816664695739746), (-0.5778749585151672, -0.7175461053848267, -0.38882920145988464)), ((-0.08944789320230484, 6.78571891784668, -4.690540790557861), (-0.676880955696106, -0.5617249608039856, -0.4757070541381836)), ((-0.48404228687286377, 7.067477703094482, -4.555841445922852), (-0.626573383808136, -0.6599403619766235, -0.41458940505981445)), ((-0.8893394470214844, 7.309377193450928, -4.454758644104004), (-0.4974776804447174, -0.7107495069503784, -0.49734416604042053)), ((-1.2964023351669312, 7.529599189758301, -4.381041049957275), (-0.45416831970214844, -0.7065609097480774, -0.542681097984314)), ((-1.660889744758606, 7.712522983551025, -4.323578357696533), (-0.35447928309440613, -0.7502374649047852, -0.5581112504005432)), ((-2.0941002368927, 7.8726959228515625, -4.247971057891846), (-0.4213423728942871, -0.7564594149589539, -0.5002396106719971))]

origin_highest_vert = (-10.5040, 2.6564, 11.9506)
# 定时器 检测重拓扑操作是否完成   完成重拓扑操作后为重拓扑后的物体添加修改器控制其平滑度
class TimerAddModifierAfterQmesh(bpy.types.Operator):
    bl_idname = "object.timer_add_modifier_after_qmesh"
    bl_label = "在重拓扑完成后为重拓扑后的物体添加平滑修改器"

    __timer = None

    def execute(self, context):
        op_cls = TimerAddModifierAfterQmesh
        op_cls.__timer = context.window_manager.event_timer_add(
            0.1, window=context.window)
        change_mat_mould(0)

        bpy.context.scene.qremesher.autodetect_hard_edges = False
        bpy.context.scene.qremesher.use_normals = False
        bpy.context.scene.qremesher.use_materials = True
        bpy.context.scene.qremesher.use_vertex_color = False
        bpy.context.scene.qremesher.adapt_quad_count = False
        bpy.context.scene.qremesher.adaptive_size = 100
        bpy.context.scene.qremesher.target_count = 10000
        bpy.ops.qremesher.remesh()

        context.window_manager.modal_handler_add(self)
        return {'RUNNING_MODAL'}

    def modal(self, context, event):
        op_cls = TimerAddModifierAfterQmesh
        name = "右耳"
        cur_obj = bpy.data.objects[name]
        cur_obj_name = cur_obj.name
        if context.area:
            context.area.tag_redraw()
        if event.type == 'TIMER':
            obj = bpy.data.objects.get("Retopo_"+cur_obj.name)
            if(obj != None):                                    #判断重拓扑是否完成
                cur_obj_qmesh = obj                             #将原物体删除,将重拓扑后的物体名称改为原物体
                bpy.data.objects.remove(cur_obj, do_unlink=True)
                cur_obj_qmesh.name = cur_obj_name
                if name == '右耳':
                    moveToRight(cur_obj_qmesh)
                elif name == '左耳':
                    moveToLeft(cur_obj_qmesh)
                bpy.ops.object.select_all(action='DESELECT')
                bpy.context.view_layer.objects.active = cur_obj_qmesh
                cur_obj_qmesh.select_set(True)
                bpy.ops.geometry.color_attribute_add(name="Color", color=(1, 0.319, 0.133, 1))
                cur_obj_qmesh.data.materials.clear()
                cur_obj_qmesh.data.materials.append(bpy.data.materials['Yellow'])
                #将重拓扑后的模型由四角面改为三角面,并将顶点取消选中
                bpy.ops.object.mode_set(mode='EDIT')
                bpy.ops.mesh.quads_convert_to_tris(quad_method='BEAUTY', ngon_method='BEAUTY')
                bpy.ops.mesh.select_all(action='DESELECT')
                bpy.ops.object.mode_set(mode='OBJECT')

                # 复制一份用于匹配模板位置
                duplicate_obj = cur_obj_qmesh.copy()
                duplicate_obj.data = cur_obj_qmesh.data.copy()
                duplicate_obj.animation_data_clear()
                duplicate_obj.name = cur_obj_qmesh.name + "OriginForFitPlace"
                bpy.context.collection.objects.link(duplicate_obj)
                duplicate_obj.hide_set(True)

                # 加到右耳集合
                if name == '右耳':
                    moveToRight(duplicate_obj)
                elif name == '左耳':
                    moveToLeft(duplicate_obj)
                # collection = bpy.data.collections['Right']
                # collection.objects.link(duplicate_obj)
                # if duplicate_obj.name in bpy.context.scene.collection.objects:
                #     bpy.context.scene.collection.objects.unlink(duplicate_obj)

                # 复制一份用于最原始物体的展示
                duplicate_obj2 = cur_obj_qmesh.copy()
                duplicate_obj2.data = cur_obj_qmesh.data.copy()
                duplicate_obj2.animation_data_clear()
                duplicate_obj2.name = cur_obj_qmesh.name + "OriginForShow"
                duplicate_obj2.data.materials.append(bpy.data.materials.get("tran_green"))
                bpy.context.collection.objects.link(duplicate_obj2)
                duplicate_obj2.hide_set(True)

                # 加到右耳集合
                if name == '右耳':
                    moveToRight(duplicate_obj2)
                elif name == '左耳':
                    moveToLeft(duplicate_obj2)
                # collection = bpy.data.collections['Right']
                # collection.objects.link(duplicate_obj2)
                # if duplicate_obj2.name in bpy.context.scene.collection.objects:
                #     bpy.context.scene.collection.objects.unlink(duplicate_obj2)

                # 开启左耳重拓扑
                override = getOverride2()
                with bpy.context.temp_override(**override):
                    bpy.ops.object.timer_add_modifier_after_qmesh_l('INVOKE_DEFAULT')

                return {'FINISHED'}
            return {'PASS_THROUGH'}
        return {'PASS_THROUGH'}



# 定时器 检测重拓扑操作是否完成   完成重拓扑操作后为重拓扑后的物体添加修改器控制其平滑度
class TimerAddModifierAfterQmeshL(bpy.types.Operator):
    bl_idname = "object.timer_add_modifier_after_qmesh_l"
    bl_label = "在重拓扑完成后为重拓扑后的物体添加平滑修改器"

    __timer = None

    def execute(self, context):
        op_cls = TimerAddModifierAfterQmeshL
        op_cls.__timer = context.window_manager.event_timer_add(
            0.1, window=context.window)

        bpy.ops.object.select_all(action='DESELECT')
        object2 = bpy.data.objects['左耳']
        bpy.context.view_layer.objects.active = object2
        object2.select_set(True)

        bpy.context.scene.qremesher.autodetect_hard_edges = False
        bpy.context.scene.qremesher.use_normals = False
        bpy.context.scene.qremesher.use_materials = True
        bpy.context.scene.qremesher.use_vertex_color = False
        bpy.context.scene.qremesher.adapt_quad_count = False
        bpy.context.scene.qremesher.adaptive_size = 100
        bpy.context.scene.qremesher.target_count = 10000
        bpy.ops.qremesher.remesh()

        context.window_manager.modal_handler_add(self)
        return {'RUNNING_MODAL'}

    def modal(self, context, event):
        op_cls = TimerAddModifierAfterQmeshL
        name = "左耳"
        cur_obj = bpy.data.objects[name]
        cur_obj_name = cur_obj.name
        if context.area:
            context.area.tag_redraw()
        if event.type == 'TIMER':
            obj = bpy.data.objects.get("Retopo_"+cur_obj.name)
            if(obj != None):                                    #判断重拓扑是否完成
                cur_obj_qmesh = obj                             #将原物体删除,将重拓扑后的物体名称改为原物体
                bpy.data.objects.remove(cur_obj, do_unlink=True)
                cur_obj_qmesh.name = cur_obj_name
                if name == '右耳':
                    moveToRight(cur_obj_qmesh)
                elif name == '左耳':
                    moveToLeft(cur_obj_qmesh)
                bpy.ops.object.select_all(action='DESELECT')
                bpy.context.view_layer.objects.active = cur_obj_qmesh
                cur_obj_qmesh.select_set(True)
                bpy.ops.geometry.color_attribute_add(name="Color", color=(1, 0.319, 0.133, 1))
                cur_obj_qmesh.data.materials.clear()
                cur_obj_qmesh.data.materials.append(bpy.data.materials['Yellow'])
                #将重拓扑后的模型由四角面改为三角面,并将顶点取消选中
                bpy.ops.object.mode_set(mode='EDIT')
                bpy.ops.mesh.quads_convert_to_tris(quad_method='BEAUTY', ngon_method='BEAUTY')
                bpy.ops.mesh.select_all(action='DESELECT')
                bpy.ops.object.mode_set(mode='OBJECT')

                # 复制一份用于匹配模板位置
                duplicate_obj = cur_obj_qmesh.copy()
                duplicate_obj.data = cur_obj_qmesh.data.copy()
                duplicate_obj.animation_data_clear()
                duplicate_obj.name = cur_obj_qmesh.name + "OriginForFitPlace"
                bpy.context.collection.objects.link(duplicate_obj)
                duplicate_obj.hide_set(True)

                # 加到左耳集合
                collection = bpy.data.collections['Left']
                collection.objects.link(duplicate_obj)
                if duplicate_obj.name in bpy.context.scene.collection.objects:
                    bpy.context.scene.collection.objects.unlink(duplicate_obj)

                # 复制一份用于展示最原始物体的展示
                duplicate_obj2 = cur_obj_qmesh.copy()
                duplicate_obj2.data = cur_obj_qmesh.data.copy()
                duplicate_obj2.animation_data_clear()
                duplicate_obj2.name = cur_obj_qmesh.name + "OriginForShow"
                duplicate_obj2.data.materials.append(bpy.data.materials.get("tran_green"))
                bpy.context.collection.objects.link(duplicate_obj2)
                duplicate_obj2.hide_set(True)

                # 加到左耳集合
                collection = bpy.data.collections['Left']
                collection.objects.link(duplicate_obj2)
                if duplicate_obj2.name in bpy.context.scene.collection.objects:
                    bpy.context.scene.collection.objects.unlink(duplicate_obj2)

                bpy.ops.object.select_all(action='DESELECT')
                object1 = bpy.data.objects['右耳']
                object1.select_set(True)
                bpy.context.view_layer.objects.active = object1

                change_mat_mould(1)
                context.window_manager.event_timer_remove(op_cls.__timer)
                op_cls.__timer = None


                return {'FINISHED'}
            return {'PASS_THROUGH'}
        return {'PASS_THROUGH'}



#通过面板参数调整硬耳膜底面平滑度
def CreateMouldHardDrumSmooth(self,context):
    bl_description = "创建模具中的硬耳膜,平滑其底部边缘"

    name = bpy.context.scene.leftWindowObj
    obj = bpy.data.objects[name]
    smooth = round(bpy.context.scene.yingErMoSheRuPianYi, 1)
    override = getOverride()
    with bpy.context.temp_override(**override):
        modifier_name = "HardEarDrumModifier"
        target_modifier = None
        for modifier in obj.modifiers:
            if modifier.name == modifier_name:  # TODO  优化：   将创建修改器放到加厚的invoke中，应用修改器放到提交中
                target_modifier = modifier
        if (target_modifier != None):
            bpy.context.object.modifiers["HardEarDrumModifier"].factor = 0.8
            bpy.context.object.modifiers["HardEarDrumModifier"].iterations = int(smooth * 10)

def bottom_fill():
    obj = bpy.context.active_object
    smooth_index = subdivide_link_edge()
    for i in range(0,5):
        smooth(smooth_index)

def subdivide_link_edge():
    obj = bpy.context.active_object
    bpy.ops.object.mode_set(mode='EDIT')
    bm = bmesh.from_edit_mesh(obj.data)

    bpy.ops.object.vertex_group_set_active(group='BottomOuterBorderVertex')
    bpy.ops.object.vertex_group_select()
    bpy.ops.mesh.remove_doubles(threshold=0.5)
    bpy.ops.mesh.mark_seam(clear=False)
    # 记录下这个缝合边的两个顶点，便于后续选中
    select_edge = [e for e in bm.edges if e.select]
    edge_vert_set = set()
    edge_vert_set.add(select_edge[0].verts[0].index)
    edge_vert_set.add(select_edge[0].verts[1].index)
    bpy.ops.mesh.fill(use_beauty=False)
    # 获取之前选中的边界
    select_edge = [e for e in bm.edges if e.select]
    bpy.ops.mesh.select_all(action='DESELECT')
    bpy.ops.mesh.select_mode(type='EDGE')
    for e in bm.edges:
        if e.verts[0].index in edge_vert_set and e.verts[1].index in edge_vert_set:
            e.select_set(True)
    bpy.ops.mesh.select_similar(type='SEAM', threshold=0.01)
    border_edge = [e for e in bm.edges if e.select]

    inner_edge = [e for e in select_edge if e not in border_edge]
    bpy.ops.mesh.select_all(action='DESELECT')
    for e in inner_edge:
        e.select_set(True)

    bpy.ops.mesh.subdivide(number_cuts=20)
    bpy.ops.mesh.select_mode(type='VERT')
    bpy.ops.mesh.quads_convert_to_tris(quad_method='BEAUTY', ngon_method='BEAUTY')
    bpy.ops.mesh.select_less()
    inner_index = [v.index for v in bm.verts if v.select]
    bpy.ops.mesh.select_all(action='SELECT')
    bpy.ops.mesh.mark_seam(clear=True)
    bpy.ops.mesh.select_all(action='DESELECT')

    # 更新底部边界顶点组
    bpy.ops.object.vertex_group_set_active(group='BottomOuterBorderVertex')
    bpy.ops.object.vertex_group_select()
    bpy.ops.object.vertex_group_remove_from()
    bpy.ops.mesh.select_all(action='DESELECT')
    bpy.ops.mesh.select_mode(type='EDGE')
    for e in border_edge:
        e.select_set(True)
    bpy.ops.mesh.select_mode(type='VERT')
    bpy.ops.object.vertex_group_assign()
    bpy.ops.mesh.select_all(action='DESELECT')
    bpy.ops.object.mode_set(mode='OBJECT')
    return inner_index

def smooth(smooth_index):
    obj = bpy.context.active_object
    bpy.ops.object.mode_set(mode = 'OBJECT')
    me = obj.data
    bm = bmesh.new()
    me = obj.data
    bm.from_mesh(me)
    bm.verts.ensure_lookup_table()

    select_vert = list()
    for index in smooth_index:
        select_vert.append(bm.verts[index])

    ori_co_dict = dict()
    for v in select_vert:
        ori_co_dict[v.index]  = v.co

    for v in select_vert:
        final_co = v.co
        count = 1
        for edge in v.link_edges:
            # 获取边的顶点
            v1 = edge.verts[0]
            v2 = edge.verts[1]
            # 确保获取的顶点不是当前顶点
            link_vert = v1 if v1 != v else v2
            final_co += link_vert.co
            count += 1
        final_co /= count
        v.co = final_co

    bm.to_mesh(obj.data)
    bm.free()


# def bottom_fill():
#     # 新方案
#     obj = bpy.context.active_object
#     bpy.ops.object.mode_set(mode='EDIT')
#     bm = bmesh.from_edit_mesh(obj.data)
#     # bpy.ops.mesh.remove_doubles(threshold=0.5)
#
#     # 边界点和边界边
#     border_verts = [v for v in bm.verts if v.select]
#     border_verts_index = [v.index for v in border_verts]
#     count = int(len(border_verts)/2)+2
#     border_edges = [e for e in bm.edges if e.select]
#     print('border_verts',len(border_verts))
#     print('border_edges',len(border_edges))
#
#     # 栅格填充方案
#     bpy.ops.mesh.select_all(action='DESELECT')
#     start_vert = min(border_verts, key=lambda v: v.co.y)
#     start_vert.select = True
#     end_vert = max(border_verts, key=lambda v: v.co.y)
#     end_vert.select = True
#
#     selected_verts = [v for v in bm.verts if v.select]
#
#     print('补面前顶点数',len(selected_verts))
#
#     count1 = 0
#     for edge in start_vert.link_edges:
#         for vert in edge.verts:
#             if vert != start_vert and vert.index in border_verts_index and count1==0 and edge in border_edges:
#                 vert.select = True
#                 edge.select = True
#                 count1+=1
#     count2 = 0
#     for edge in end_vert.link_edges:
#         for vert in edge.verts:
#             if vert != start_vert and vert.index in border_verts_index and count2==0 and edge in border_edges:
#                 vert.select = True
#                 edge.select = True
#                 count2+=1
#     selected_verts = [v for v in bm.verts if v.select]
#     print('补面前顶点数2',len(selected_verts))
#     bpy.ops.mesh.fill_grid()
#
#     # # 选取起始点和相邻点
#     # bpy.ops.mesh.select_all(action='DESELECT')
#     # start_vert = min(border_verts, key=lambda v: v.co.y)
#     # start_vert.select = True
#
#     # for edge in start_vert.link_edges:
#     #     for vert in edge.verts:
#     #         if vert != start_vert and vert in border_verts:
#     #             vert.select = True
#
#     # # 先补一个面,再循环补面
#     # bpy.ops.mesh.edge_face_add()
#     # start_vert.select = False
#     # while(count>0):
#     #     bpy.ops.mesh.edge_face_add()
#     #     count = count-1
#
#     # 选取新增的边，并细分
#     bpy.ops.mesh.select_all(action='DESELECT')
#     bpy.ops.object.vertex_group_select()
#     selected_edges2 = [v for v in bm.edges if v.select]
#     new_edges = [e for e in selected_edges2 if e not in border_edges]
#     print('edge2',len(selected_edges2))
#     print('new edge',len(new_edges))
#
#     bpy.ops.mesh.select_all(action='DESELECT')
#     for e in new_edges:
#         e.select = True
#
#     old_num = len(bm.verts)
#
#     bpy.ops.mesh.subdivide()
#     bm = bmesh.from_edit_mesh(obj.data)
#     selected_verts = [v for v in bm.verts if v.select]
#     # 选取细分点，并移动
#     mid_verts = [v for v in selected_verts if v.index >= old_num]
#     print('mid_verts',len(mid_verts))
#
#     bpy.ops.mesh.select_all(action='DESELECT')
#     inner_verts = []
#     for v in mid_verts:
#         for edge in v.link_edges:
#             for vert in edge.verts:
#                 if vert != v and vert.index < old_num:
#                     if v not in inner_verts:
#                         lens = edge.calc_length()
#                         inner_verts.append(v)
#                         dis = round(lens * 0.25,2)
#                         v.co -= v.normal * dis
#                         v.select = True
#     print('inner',len(inner_verts))
#     bmesh.update_edit_mesh(obj.data)
#
#     # bpy.ops.mesh.select_all(action='DESELECT')
#     # bpy.ops.object.vertex_group_select()
#     # selected_edges3 = [e for e in bm.edges if e.select]
#     # inner_edges = [e for e in selected_edges3 if e not in border_edges]
#     # print('inner_edges',len(inner_edges))
#
#     # old_num2 = len(bm.verts)
#     # # 选取内部边，再次细分
#     # bpy.ops.mesh.select_all(action='DESELECT')
#     # for e in inner_edges:
#     #     e.select = True
#
#     # bpy.ops.mesh.subdivide()
#     # bm = bmesh.from_edit_mesh(obj.data)
#     # selected_verts2 = [v for v in bm.verts if v.select]
#     # side_verts = [v for v in selected_verts2 if v.index not in border_verts_index]
#     # print('selected_verts2',len(selected_verts))
#     # print('side_verts',len(side_verts))
#
#     # # 二次细分点
#     # verts = []
#     # for v in side_verts:
#     #     for edge in v.link_edges:
#     #         for vert in edge.verts:
#     #             if vert != v and vert.index in border_verts_index:
#     #                 if v not in verts:
#     #                     verts.append(v)
#
#
#     # print('verts',len(verts))
#
#     # bpy.ops.mesh.select_all(action='DESELECT')
#
#     # inner_side_verts = []
#     # for v in verts:
#     #     for edge in v.link_edges:
#     #         for vert in edge.verts:
#     #             if vert != v and vert.index in border_verts_index:
#     #                 if v not in inner_side_verts:
#     #                     lens = edge.calc_length()
#     #                     inner_side_verts.append(v)
#     #                     dis = round(lens * 0.1,2)
#     #                     v.co -= v.normal * dis
#     #                     v.select = True
#
#     # print('inner_side_verts',len(inner_side_verts))
#
#     bmesh.update_edit_mesh(obj.data)
#     bottom_outer_border_vertex = obj.vertex_groups.get("BottomOuterBorderVertex")
#     bpy.ops.object.vertex_group_set_active(group='BottomOuterBorderVertex')
#     if (bottom_outer_border_vertex != None):
#         bpy.ops.object.vertex_group_select()
#     # 融并底部所有面
#     bpy.ops.mesh.select_mode(type='FACE')
#     bpy.ops.mesh.dissolve_faces()
#     bpy.ops.mesh.select_mode(type='VERT')
#     bpy.ops.object.mode_set(mode='OBJECT')


# 沿方向挤出再补面版本
# def bottom_fill():
#     # 新方案
#     obj = bpy.context.active_object
#     bpy.ops.object.mode_set(mode='EDIT')
#     bm = bmesh.from_edit_mesh(obj.data)
#     # bpy.ops.mesh.remove_doubles(threshold=0.5)
#
#     # 边界点和边界边
#     border_verts = [v for v in bm.verts if v.select]
#     border_verts_index = [v.index for v in border_verts]
#     count = int(len(border_verts)/2)+2
#     border_edges = [e for e in bm.edges if e.select]
#     print('border_verts',len(border_verts))
#     print('border_edges',len(border_edges))
#
#     # 栅格填充方案
#     bpy.ops.mesh.select_all(action='DESELECT')
#     start_vert = min(border_verts, key=lambda v: v.co.y)
#     start_vert.select = True
#     end_vert = max(border_verts, key=lambda v: v.co.y)
#     end_vert.select = True
#
#     selected_verts = [v for v in bm.verts if v.select]
#
#     print('补面前顶点数',len(selected_verts))
#
#     count1 = 0
#     for edge in start_vert.link_edges:
#         for vert in edge.verts:
#             if vert != start_vert and vert.index in border_verts_index and count1==0 and edge in border_edges:
#                 vert.select = True
#                 edge.select = True
#                 count1+=1
#     count2 = 0
#     for edge in end_vert.link_edges:
#         for vert in edge.verts:
#             if vert != start_vert and vert.index in border_verts_index and count2==0 and edge in border_edges:
#                 vert.select = True
#                 edge.select = True
#                 count2+=1
#     selected_verts = [v for v in bm.verts if v.select]
#     print('补面前顶点数2',len(selected_verts))
#     bpy.ops.mesh.fill_grid()
#
#     # # 选取起始点和相邻点
#     # bpy.ops.mesh.select_all(action='DESELECT')
#     # start_vert = min(border_verts, key=lambda v: v.co.y)
#     # start_vert.select = True
#
#     # for edge in start_vert.link_edges:
#     #     for vert in edge.verts:
#     #         if vert != start_vert and vert in border_verts:
#     #             vert.select = True
#
#     # # 先补一个面,再循环补面
#     # bpy.ops.mesh.edge_face_add()
#     # start_vert.select = False
#     # while(count>0):
#     #     bpy.ops.mesh.edge_face_add()
#     #     count = count-1
#
#     # 选取新增的边，并细分
#     bpy.ops.mesh.select_all(action='DESELECT')
#     bpy.ops.object.vertex_group_set_active(group='BottomInnerBorderVertex')
#     bpy.ops.object.vertex_group_select()
#     selected_edges2 = [v for v in bm.edges if v.select]
#     new_edges = [e for e in selected_edges2 if e not in border_edges]
#     print('edge2',len(selected_edges2))
#     print('new edge',len(new_edges))
#
#     bpy.ops.mesh.select_all(action='DESELECT')
#     for e in new_edges:
#         e.select = True
#
#     old_num = len(bm.verts)
#
#     bpy.ops.mesh.subdivide()
#     bm = bmesh.from_edit_mesh(obj.data)
#     selected_verts = [v for v in bm.verts if v.select]
#     # 选取细分点，并移动
#     mid_verts = [v for v in selected_verts if v.index >= old_num]
#     print('mid_verts',len(mid_verts))
#
#     bpy.ops.mesh.select_all(action='DESELECT')
#     inner_verts = []
#     for v in mid_verts:
#         for edge in v.link_edges:
#             for vert in edge.verts:
#                 if vert != v and vert.index < old_num:
#                     if v not in inner_verts:
#                         lens = edge.calc_length()
#                         inner_verts.append(v)
#                         dis = round(lens * 0.2,2)
#                         v.co -= v.normal * dis
#                         v.select = True
#     print('inner',len(inner_verts))
#     bmesh.update_edit_mesh(obj.data)
#
#     bpy.ops.mesh.select_all(action='DESELECT')
#     bpy.ops.object.vertex_group_set_active(group='BottomInnerBorderVertex')
#     bpy.ops.object.vertex_group_select()
#     selected_edges3 = [e for e in bm.edges if e.select]
#     inner_edges = [e for e in selected_edges3 if e not in border_edges]
#     print('inner_edges',len(inner_edges))
#
#     old_num2 = len(bm.verts)
#     # 选取内部边，再次细分
#     bpy.ops.mesh.select_all(action='DESELECT')
#     for e in inner_edges:
#         e.select = True
#
#     bpy.ops.mesh.subdivide()
#     bm = bmesh.from_edit_mesh(obj.data)
#     selected_verts2 = [v for v in bm.verts if v.select]
#     side_verts = [v for v in selected_verts2 if v.index not in border_verts_index]
#     print('selected_verts2',len(selected_verts))
#     print('side_verts',len(side_verts))
#
#     # 二次细分点
#     verts = []
#     for v in side_verts:
#         for edge in v.link_edges:
#             for vert in edge.verts:
#                 if vert != v and vert.index in border_verts_index:
#                     if v not in verts:
#                         verts.append(v)
#
#
#     print('verts',len(verts))
#
#     bpy.ops.mesh.select_all(action='DESELECT')
#
#     inner_side_verts = []
#     for v in verts:
#         for edge in v.link_edges:
#             for vert in edge.verts:
#                 if vert != v and vert.index in border_verts_index:
#                     if v not in inner_side_verts:
#                         lens = edge.calc_length()
#                         inner_side_verts.append(v)
#                         dis = round(lens * 0.1,2)
#                         v.co -= v.normal * dis
#                         v.select = True
#
#     print('inner_side_verts',len(inner_side_verts))
#
#     bmesh.update_edit_mesh(obj.data)
#     bpy.ops.mesh.select_all(action='DESELECT')
#     bottom_outer_border_vertex = obj.vertex_groups.get("BottomInnerBorderVertex")
#     bpy.ops.object.vertex_group_set_active(group='BottomInnerBorderVertex')
#     if (bottom_outer_border_vertex != None):
#         bpy.ops.object.vertex_group_select()
#     # 融并底部所有面
#     bpy.ops.mesh.select_mode(type='FACE')
#     bpy.ops.mesh.dissolve_faces()
#     bpy.ops.object.mode_set(mode='OBJECT')


def bottom_smooth(lowest_z_co):
    #根据模型中顶点在z轴上的最低值,获取底面附近用于平滑的顶点。将顶点索引存储在该数组中
    hard_eardrum_smooth_vertex_index = []
    name = bpy.context.scene.leftWindowObj
    obj = bpy.data.objects[name]
    me = obj.data
    bm = bmesh.new()
    bm.from_mesh(me)
    bm.verts.ensure_lookup_table()
    for vert in bm.verts:
        if ((vert.co[2] > lowest_z_co - 1.5) and (vert.co[2] < lowest_z_co + 1.5)):
            hard_eardrum_smooth_vertex_index.append(vert.index)

    # 根据获取的顶点索引数组创建顶点组
    bpy.ops.object.mode_set(mode='OBJECT')
    hard_eardrum_border_vertex = obj.vertex_groups.get("HardEarDrumBorderVertex")
    if (hard_eardrum_border_vertex == None):
        hard_eardrum_border_vertex = obj.vertex_groups.new(name="HardEarDrumBorderVertex")
    for vert_index in hard_eardrum_smooth_vertex_index:
        hard_eardrum_border_vertex.add([vert_index], 1, 'ADD')

    # bpy.ops.object.mode_set(mode='EDIT')
    # bpy.ops.mesh.select_all(action='DESELECT')
    # hard_eardrum_border_vertex = obj.vertex_groups.get("HardEarDrumBorderVertex")
    # bpy.ops.object.vertex_group_set_active(group='HardEarDrumBorderVertex')
    # if (hard_eardrum_border_vertex != None):
    #     bpy.ops.object.vertex_group_select()

    # 创建平滑修改器,指定硬耳膜平滑顶点组
    modifier_name = "HardEarDrumModifier"
    target_modifier = None
    for modifier in obj.modifiers:
        if modifier.name == modifier_name:  # TODO  优化：   将创建修改器放到加厚的invoke中，应用修改器放到提交中
            target_modifier = modifier
    if (target_modifier == None):
        bpy.ops.object.modifier_add(type='SMOOTH')
        bpy.context.object.modifiers["Smooth"].vertex_group = "HardEarDrumBorderVertex"
        hard_eardrum_modifier = bpy.context.object.modifiers["Smooth"]
        hard_eardrum_modifier.name = "HardEarDrumModifier"
    bpy.context.object.modifiers["HardEarDrumModifier"].factor = 0.8
    bpy.context.object.modifiers["HardEarDrumModifier"].iterations = 2


def hard_cut():
    # 硬耳膜底部切割
    high_percent = 0.25
    lowest_z_co = get_plane_height(high_percent)
    bpy.context.scene.yingErMoLowestZCo = lowest_z_co
    global origin_highest_vert
    global border_vert_co_and_normal
    hard_normal_projection_to_darw_cut_plane(origin_highest_vert, border_vert_co_and_normal)
    utils_plane_cut()
    bpy.ops.object.mode_set(mode='EDIT')  # 选中切割后的循环边
    name = bpy.context.scene.leftWindowObj
    cur_obj = bpy.data.objects[name]
    bottom_outer_border_vertex = cur_obj.vertex_groups.get("BottomOuterBorderVertex")
    if (bottom_outer_border_vertex != None):
       bpy.ops.object.vertex_group_set_active(group='BottomOuterBorderVertex')
    bpy.ops.object.vertex_group_select()

    bpy.ops.mesh.remove_doubles(threshold=0.5)
    bm = bmesh.from_edit_mesh(cur_obj.data)
    outer_border = [v for v in bm.verts if v.select]
    outer_edges = set()
    extrude_direction = {}
    # 遍历选中的顶点
    for vert in outer_border:
        key = (vert.co[0], vert.co[1], vert.co[2])
        extrude_direction[key] = vert.normal
        for edge in vert.link_edges:
            # 检查边的两个顶点是否都在选中的顶点中
            if edge.verts[0] in outer_border and edge.verts[1] in outer_border:
                outer_edges.add(edge)
                edge.select_set(True)

    # 复制选中的顶点并沿着各自的法线方向移动
    bpy.ops.mesh.duplicate()

    # 获取所有选中的顶点
    inside_border_vert = [v for v in bm.verts if v.select]
    inside_border_index = [v.index for v in bm.verts if v.select]

    inside_edges = [e for e in bm.edges if e.select]

    for i, vert in enumerate(inside_border_vert):
        key = (vert.co[0], vert.co[1], vert.co[2])
        dir = extrude_direction[key]
        vert.co -= dir.normalized() * 2  # 沿法线方向移动

    # 重新选中外边界
    for v in outer_border:
        v.select_set(True)

    for edge in outer_edges:
        edge.select_set(True)

    bpy.ops.mesh.bridge_edge_loops()

    bpy.ops.object.mode_set(mode='OBJECT')
    set_vert_group("BottomInnerBorderVertex", inside_border_index)

    bpy.ops.object.mode_set(mode='EDIT')
    bpy.ops.mesh.select_all(action='DESELECT')
    bpy.ops.object.vertex_group_set_active(group='BottomInnerBorderVertex')
    bpy.ops.object.vertex_group_select()
    bpy.ops.object.vertex_group_set_active(group='BottomOuterBorderVertex')
    bpy.ops.object.vertex_group_remove_from()
    bpy.ops.object.mode_set(mode='OBJECT')


def hard_fill():
    bottom_fill()  # 底面切割后补面并且重拓扑
    # convert_to_mesh('BottomRingBorderR', 'meshBottomRingBorderR', 0.18)
    pass  # TODO 将模型由透明变为非透明
    # bpy.data.objects.remove(duplicate_obj, do_unlink=True)
    # # 解决重拓扑的异步问题   添加平滑修改器,指定硬耳膜平滑顶点组,且可通过面板参数调整平滑度
    # # bottom_smooth(-5.2)
    # bpy.ops.object.timer_add_modifier_after_qmesh()
    # bpy.ops.object.mode_set(mode='OBJECT')


def apply_hard_eardrum_template():
    # 硬耳膜底部切割
    high_percent = 0.25
    lowest_z_co = get_plane_height(high_percent)
    bpy.context.scene.yingErMoLowestZCo = lowest_z_co
    global origin_highest_vert
    global border_vert_co_and_normal
    hard_normal_projection_to_darw_cut_plane(origin_highest_vert,border_vert_co_and_normal)
    utils_plane_cut()
    bpy.ops.object.mode_set(mode='EDIT')   #选中切割后的循环边
    name = bpy.context.scene.leftWindowObj
    cur_obj = bpy.data.objects[name]
    bottom_outer_border_vertex = cur_obj.vertex_groups.get("BottomOuterBorderVertex")
    if(bottom_outer_border_vertex != None):
        bpy.ops.object.vertex_group_set_active(group='BottomOuterBorderVertex')
    bpy.ops.object.vertex_group_select()
    bpy.ops.object.mode_set(mode='OBJECT')
    # 底部切割后补面                         #TODO      补面过程有顿挫感,先复制出一份模型作为对比,在将当前模型透明过隐藏补面过程,补面完成后再将该模型实体化并删除复制的模型
    # active_obj = bpy.context.active_object
    # duplicate_obj = active_obj.copy()
    # duplicate_obj.data = active_obj.data.copy()
    # duplicate_obj.name = "HardDrumFillCompare"
    # duplicate_obj.animation_data_clear()
    # bpy.context.scene.collection.objects.link(duplicate_obj)
    # duplicate_obj.select_set(state=False)
    pass  # TODO 将当前模型变透明
    bottom_fill()                                      #底面切割后补面并且重拓扑
    name = bpy.context.scene.leftWindowObj
    convert_to_mesh(name+"BottomRingBorderR", name+"meshBottomRingBorderR", 0.18)
    pass  # TODO 将模型由透明变为非透明
    # bpy.data.objects.remove(duplicate_obj, do_unlink=True)
    # # 解决重拓扑的异步问题   添加平滑修改器,指定硬耳膜平滑顶点组,且可通过面板参数调整平滑度
    # # bottom_smooth(-5.2)
    bpy.ops.object.timer_add_modifier_after_qmesh()
    bpy.ops.object.mode_set(mode='OBJECT')

def hard_clear_co_and_normal():
    global border_vert_co_and_normal
    border_vert_co_and_normal = []


def hard_set_co_and_normal(co, normal):
    global border_vert_co_and_normal
    border_vert_co_and_normal.append((co, normal))

def hard_set_highest_vert():
    global origin_highest_vert
    name = bpy.context.scene.leftWindowObj
    origin_highest_vert = get_highest_vert(name + "OriginForFitPlace")





_classes = [
    TimerAddModifierAfterQmesh,
    TimerAddModifierAfterQmeshL
]


def register():
    for cls in _classes:
        bpy.utils.register_class(cls)


def unregister():
    for cls in _classes:
        bpy.utils.unregister_class(cls)